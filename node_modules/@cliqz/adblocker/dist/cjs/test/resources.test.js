"use strict";
/*!
 * Copyright (c) 2017-present Cliqz GmbH. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("mocha");
const utils_1 = require("./utils");
const data_view_1 = require("../src/data-view");
const resources_1 = require("../src/resources");
describe('#Resources', () => {
    it('#serialize', () => {
        const resources = resources_1.default.parse((0, utils_1.loadResources)(), { checksum: 'checksum' });
        (0, chai_1.expect)(resources.checksum).to.equal('checksum');
        const buffer = data_view_1.StaticDataView.allocate(2000000, { enableCompression: false });
        resources.serialize(buffer);
        buffer.seekZero();
        (0, chai_1.expect)(resources_1.default.deserialize(buffer)).to.eql(resources);
    });
    describe('#parse', () => {
        it('parses empty resources', () => {
            const resources = resources_1.default.parse('', { checksum: 'checksum' });
            (0, chai_1.expect)(resources.checksum).to.equal('checksum');
            (0, chai_1.expect)(resources.js).to.eql(new Map());
            (0, chai_1.expect)(resources.resources).to.eql(new Map());
        });
        it('parses one resource', () => {
            const resources = resources_1.default.parse('foo application/javascript\ncontent', {
                checksum: 'checksum',
            });
            (0, chai_1.expect)(resources.checksum).to.equal('checksum');
            (0, chai_1.expect)(resources.js).to.eql(new Map([['foo', 'content']]));
            (0, chai_1.expect)(resources.resources).to.eql(new Map([['foo', { contentType: 'application/javascript', body: 'content' }]]));
        });
        it('parses two resources', () => {
            const resources = resources_1.default.parse(['foo application/javascript\ncontent1', 'pixel.png image/png;base64\ncontent2'].join('\n\n'), { checksum: 'checksum' });
            (0, chai_1.expect)(resources.checksum).to.equal('checksum');
            (0, chai_1.expect)(resources.js).to.eql(new Map([['foo', 'content1']]));
            (0, chai_1.expect)(resources.resources).to.eql(new Map([
                ['foo', { contentType: 'application/javascript', body: 'content1' }],
                ['pixel.png', { contentType: 'image/png;base64', body: 'content2' }],
            ]));
        });
        it('robust to weird format', () => {
            const resources = resources_1.default.parse(`
# Comment
   # Comment 2
foo application/javascript
content1
# Comment 3

# Type missing
pixel.png
content

# Content missing
pixel.png image/png;base64

# This one is good!
pixel.png   image/png;base64
content2
`, { checksum: 'checksum' });
            (0, chai_1.expect)(resources.checksum).to.equal('checksum');
            (0, chai_1.expect)(resources.js).to.eql(new Map([['foo', 'content1']]));
            (0, chai_1.expect)(resources.resources).to.eql(new Map([
                ['foo', { contentType: 'application/javascript', body: 'content1' }],
                ['pixel.png', { contentType: 'image/png;base64', body: 'content2' }],
            ]));
        });
    });
});
//# sourceMappingURL=resources.test.js.map