"use strict";
/*!
 * Copyright (c) 2017-present Cliqz GmbH. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("mocha");
const tldts_experimental_1 = require("tldts-experimental");
const cosmetic_1 = require("../src/filters/cosmetic");
const network_1 = require("../src/filters/network");
const lists_1 = require("../src/lists");
const request_1 = require("../src/request");
const requests_1 = require("./data/requests");
(0, chai_1.use)((chai, utils) => {
    utils.addMethod(chai.Assertion.prototype, 'matchRequest', function (req) {
        const filter = this._obj;
        const request = request_1.default.fromRawDetails(req);
        new chai.Assertion(filter).not.to.be.null;
        this.assert(filter.match(request), 'expected #{this} to match #{exp}', 'expected #{this} to not match #{exp}');
    });
    utils.addMethod(chai.Assertion.prototype, 'matchHostname', function (hostname) {
        const filter = this._obj;
        new chai.Assertion(filter).not.to.be.null;
        this.assert(filter.match(hostname, (0, tldts_experimental_1.getDomain)(hostname) || ''), 'expected #{this} to match #{exp}', 'expected #{this} to not match #{exp}');
    });
});
describe('#isAnchoredByHostname', () => {
    it('matches empty hostname', () => {
        (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('', 'foo.com', false)).to.be.true;
    });
    it('does not match when filter hostname is longer than hostname', () => {
        (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('bar.foo.com', 'foo.com', false)).to.be.false;
        (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('b', '', false)).to.be.false;
        (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('foo.com', 'foo.co', false)).to.be.false;
    });
    it('does not match if there is not match', () => {
        (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('bar', 'foo.com', false)).to.be.false;
    });
    describe('prefix match', () => {
        it('matches exact match', () => {
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('', '', false)).to.be.true;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('f', 'f', false)).to.be.true;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('foo', 'foo', false)).to.be.true;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('foo.com', 'foo.com', false)).to.be.true;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('.com', '.com', false)).to.be.true;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('com.', 'com.', false)).to.be.true;
        });
        it('matches partial', () => {
            // Single label
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('foo', 'foo.com', false)).to.be.true;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('foo.', 'foo.com', false)).to.be.true;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('.foo', '.foo.com', false)).to.be.true;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('.foo.', '.foo.com', false)).to.be.true;
            // Multiple labels
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('foo.com', 'foo.com.', false)).to.be.true;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('foo.com.', 'foo.com.', false)).to.be.true;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('.foo.com.', '.foo.com.', false)).to.be.true;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('.foo.com', '.foo.com', false)).to.be.true;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('foo.bar', 'foo.bar.com', false)).to.be.true;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('foo.bar.', 'foo.bar.com', false)).to.be.true;
        });
        it('does not match partial prefix', () => {
            // Single label
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('foo', 'foobar.com', false)).to.be.false;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('fo', 'foo.com', false)).to.be.false;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('.foo', 'foobar.com', false)).to.be.false;
            // Multiple labels
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('foo.bar', 'foo.barbaz.com', false)).to.be.false;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('.foo.bar', '.foo.barbaz.com', false)).to.be.false;
        });
    });
    describe('suffix match', () => {
        it('matches partial', () => {
            // Single label
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('com', 'foo.com', false)).to.be.true;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('.com', 'foo.com', false)).to.be.true;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('.com.', 'foo.com.', false)).to.be.true;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('com.', 'foo.com.', false)).to.be.true;
            // Multiple labels
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('foo.com.', '.foo.com.', false)).to.be.true;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('foo.com', '.foo.com', false)).to.be.true;
        });
        it('does not match partial', () => {
            // Single label
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('om', 'foo.com', false)).to.be.false;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('com', 'foocom', false)).to.be.false;
            // Multiple labels
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('foo.bar.com', 'baz.bar.com', false)).to.be.false;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('fo.bar.com', 'foo.bar.com', false)).to.be.false;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('.fo.bar.com', 'foo.bar.com', false)).to.be.false;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('bar.com', 'foobar.com', false)).to.be.false;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('.bar.com', 'foobar.com', false)).to.be.false;
        });
    });
    describe('infix match', () => {
        it('matches partial', () => {
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('bar', 'foo.bar.com', false)).to.be.true;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('bar.', 'foo.bar.com', false)).to.be.true;
            (0, chai_1.expect)((0, network_1.isAnchoredByHostname)('.bar.', 'foo.bar.com', false)).to.be.true;
        });
    });
});
describe('#NetworkFilter.match', () => {
    requests_1.default.forEach(({ filters, type, sourceUrl, url }) => {
        filters.forEach((filter) => {
            it(`${filter} matches ${type}, url=${url}, source=${sourceUrl}`, () => {
                const networkFilter = network_1.default.parse(filter, true);
                (0, chai_1.expect)(networkFilter).not.to.be.null;
                (0, chai_1.expect)(networkFilter).to.matchRequest({
                    sourceUrl,
                    type: type,
                    url,
                });
            });
        });
    });
    it('pattern', () => {
        (0, chai_1.expect)((0, lists_1.f) `foo`).to.matchRequest({ url: 'https://bar.com/foo' });
        (0, chai_1.expect)((0, lists_1.f) `foo`).to.matchRequest({ url: 'https://bar.com/baz/foo' });
        (0, chai_1.expect)((0, lists_1.f) `foo`).to.matchRequest({ url: 'https://bar.com/q=foo/baz' });
        (0, chai_1.expect)((0, lists_1.f) `foo`).to.matchRequest({ url: 'https://foo.com' });
        (0, chai_1.expect)((0, lists_1.f) `-foo-`).to.matchRequest({ url: 'https://bar.com/baz/42-foo-q' });
        (0, chai_1.expect)((0, lists_1.f) `&fo.o=+_-`).to.matchRequest({ url: 'https://bar.com?baz=42&fo.o=+_-' });
        (0, chai_1.expect)((0, lists_1.f) `foo/bar/baz`).to.matchRequest({ url: 'https://bar.com/foo/bar/baz' });
        (0, chai_1.expect)((0, lists_1.f) `com/bar/baz`).to.matchRequest({ url: 'https://bar.com/bar/baz' });
        (0, chai_1.expect)((0, lists_1.f) `https://bar.com/bar/baz`).to.matchRequest({ url: 'https://bar.com/bar/baz' });
    });
    it('||pattern', () => {
        (0, chai_1.expect)((0, lists_1.f) `||foo.com`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||foo.com/bar`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||foo`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||foo`).to.matchRequest({ url: 'https://baz.foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||foo`).to.matchRequest({ url: 'https://foo.baz.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||foo.baz`).to.matchRequest({ url: 'https://foo.baz.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||foo.baz.`).to.matchRequest({ url: 'https://foo.baz.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||foo.baz.com^`).to.matchRequest({ url: 'https://foo.baz.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||foo.baz^`).not.to.matchRequest({ url: 'https://foo.baz.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||foo`).not.to.matchRequest({ url: 'https://baz.com' });
        (0, chai_1.expect)((0, lists_1.f) `||foo`).not.to.matchRequest({ url: 'https://foo-bar.baz.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||foo.com`).not.to.matchRequest({ url: 'https://foo.de' });
        (0, chai_1.expect)((0, lists_1.f) `||foo.com`).not.to.matchRequest({ url: 'https://bar.foo.de' });
    });
    it('||pattern|', () => {
        (0, chai_1.expect)((0, lists_1.f) `||foo.com|`).to.matchRequest({ url: 'https://foo.com' });
        (0, chai_1.expect)((0, lists_1.f) `||foo.com/bar|`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||foo.com/bar|`).not.to.matchRequest({ url: 'https://foo.com/bar/baz' });
        (0, chai_1.expect)((0, lists_1.f) `||foo.com/bar|`).not.to.matchRequest({ url: 'https://foo.com/' });
        (0, chai_1.expect)((0, lists_1.f) `||bar.com/bar|`).not.to.matchRequest({ url: 'https://foo.com/' });
    });
    it('pattern|', () => {
        (0, chai_1.expect)((0, lists_1.f) `foo.com`).to.matchRequest({ url: 'https://foo.com' });
        (0, chai_1.expect)((0, lists_1.f) `foo|`).to.matchRequest({ url: 'https://bar.com/foo' });
        (0, chai_1.expect)((0, lists_1.f) `foo|`).not.to.matchRequest({ url: 'https://bar.com/foo/' });
        (0, chai_1.expect)((0, lists_1.f) `foo|`).not.to.matchRequest({ url: 'https://bar.com/foo/baz' });
    });
    it('|pattern', () => {
        (0, chai_1.expect)((0, lists_1.f) `|http`).to.matchRequest({ url: 'http://foo.com' });
        (0, chai_1.expect)((0, lists_1.f) `|http`).to.matchRequest({ url: 'https://foo.com' });
        (0, chai_1.expect)((0, lists_1.f) `|https://`).to.matchRequest({ url: 'https://foo.com' });
        (0, chai_1.expect)((0, lists_1.f) `https`).not.to.matchRequest({ url: 'http://foo.com' });
    });
    it('|pattern|', () => {
        (0, chai_1.expect)((0, lists_1.f) `|https://foo.com|`).to.matchRequest({ url: 'https://foo.com' });
    });
    it('||pattern + left-anchor', () => {
        (0, chai_1.expect)((0, lists_1.f) `||foo.com^test`).to.matchRequest({ url: 'https://foo.com/test' });
        (0, chai_1.expect)((0, lists_1.f) `||foo.com/test`).to.matchRequest({ url: 'https://foo.com/test' });
        (0, chai_1.expect)((0, lists_1.f) `||foo.com^test`).not.to.matchRequest({ url: 'https://foo.com/tes' });
        (0, chai_1.expect)((0, lists_1.f) `||foo.com/test`).not.to.matchRequest({ url: 'https://foo.com/tes' });
        (0, chai_1.expect)((0, lists_1.f) `||foo.com^`).to.matchRequest({ url: 'https://foo.com/test' });
        (0, chai_1.expect)((0, lists_1.f) `||foo.com/test*bar`).to.matchRequest({ url: 'https://foo.com/testbar' });
        (0, chai_1.expect)((0, lists_1.f) `||foo.com^test*bar`).to.matchRequest({ url: 'https://foo.com/testbar' });
    });
    it('||hostname^*/pattern', () => {
        (0, chai_1.expect)((0, lists_1.f) `||foo.com^*/bar`).not.to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||com^*/bar`).not.to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||foo^*/bar`).not.to.matchRequest({ url: 'https://foo.com/bar' });
        // @see https://github.com/cliqz-oss/adblocker/issues/29
        (0, chai_1.expect)((0, lists_1.f) `||foo.co^aaa/`).not.to.matchRequest({ url: 'https://bar.foo.com/bbb/aaa/' });
        (0, chai_1.expect)((0, lists_1.f) `||foo.com^aaa/`).not.to.matchRequest({ url: 'https://bar.foo.com/bbb/aaa/' });
        (0, chai_1.expect)((0, lists_1.f) `||com*^bar`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||foo.com^bar`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||com^bar`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||foo*^bar`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||foo*/bar`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||foo*com/bar`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||foo*com*/bar`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||foo*com*^bar`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||*foo*com*^bar`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||*/bar`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||*^bar`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||*com/bar`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||*.com/bar`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||*foo.com/bar`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||*com/bar`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||*com*/bar`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `||*com*^bar`).to.matchRequest({ url: 'https://foo.com/bar' });
    });
    it('/regex/', () => {
        (0, chai_1.expect)((0, lists_1.f) `/com/`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `/.*/`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `/foo\\.\\w+[/]/`).to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `/foo.[0-9]\\w+[^/]/`).to.matchRequest({ url: 'https://foo.3om/bar' });
        (0, chai_1.expect)((0, lists_1.f) `/foo.[0-9]\\w+[^/]/`).not.to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `/foo.[0-9]\\w+[^/]/`).to.matchRequest({ url: 'https://foo43om/bar' });
        (0, chai_1.expect)((0, lists_1.f) `/foo\\.[0-9]\\w+[^/]/`).not.to.matchRequest({ url: 'https://foo43om/bar' });
        (0, chai_1.expect)((0, lists_1.f) `/com/$image`).not.to.matchRequest({ url: 'https://foo.com/bar' });
        (0, chai_1.expect)((0, lists_1.f) `/\\w{10,20}\\.com/$script`).to.matchRequest({
            type: 'script',
            url: 'https://qwertyuiopas1234567890.com/bar',
        });
    });
    it('options', () => {
        // cpt test
        (0, chai_1.expect)((0, lists_1.f) `||foo$image`).to.matchRequest({ url: 'https://foo.com/bar', type: 'image' });
        (0, chai_1.expect)((0, lists_1.f) `||foo$image`).not.to.matchRequest({
            type: 'script',
            url: 'https://foo.com/bar',
        });
        (0, chai_1.expect)((0, lists_1.f) `||foo$~image`).to.matchRequest({
            type: 'script',
            url: 'https://foo.com/bar',
        });
        // ~third-party
        (0, chai_1.expect)((0, lists_1.f) `||foo$~third-party`).to.matchRequest({
            sourceUrl: 'http://baz.foo.com',
            url: 'https://foo.com/bar',
        });
        (0, chai_1.expect)((0, lists_1.f) `||foo$~third-party`).not.to.matchRequest({
            sourceUrl: 'http://baz.bar.com',
            url: 'https://foo.com/bar',
            type: 'script',
        });
        // ~first-party
        (0, chai_1.expect)((0, lists_1.f) `||foo$~first-party`).to.matchRequest({
            sourceUrl: 'http://baz.bar.com',
            url: 'https://foo.com/bar',
            type: 'script',
        });
        (0, chai_1.expect)((0, lists_1.f) `||foo$~first-party`).not.to.matchRequest({
            sourceUrl: 'http://baz.foo.com',
            url: 'https://foo.com/bar',
        });
        // opt-domain
        (0, chai_1.expect)((0, lists_1.f) `||foo$domain=foo.com`).to.matchRequest({
            sourceUrl: 'http://foo.com',
            url: 'https://foo.com/bar',
        });
        (0, chai_1.expect)((0, lists_1.f) `||foo$domain=sub1.foo.com`).not.to.matchRequest({
            sourceUrl: 'http://sub2.sub1.bar.com',
            url: 'https://foo.com/bar',
        });
        (0, chai_1.expect)((0, lists_1.f) `||foo$domain=foo.com`).not.to.matchRequest({
            sourceUrl: 'http://bar.com',
            url: 'https://foo.com/bar',
        });
        // opt-not-domain
        (0, chai_1.expect)((0, lists_1.f) `||foo$domain=~bar.com`).to.matchRequest({
            sourceUrl: 'http://foo.com',
            url: 'https://foo.com/bar',
        });
        (0, chai_1.expect)((0, lists_1.f) `||foo$domain=~bar.*`).to.matchRequest({
            sourceUrl: 'http://foo.com',
            url: 'https://foo.com/bar',
        });
        (0, chai_1.expect)((0, lists_1.f) `||foo$domain=~bar.com`).not.to.matchRequest({
            sourceUrl: 'http://bar.com',
            url: 'https://foo.com/bar',
        });
        (0, chai_1.expect)((0, lists_1.f) `||foo$domain=~bar.*`).not.to.matchRequest({
            sourceUrl: 'http://bar.com',
            url: 'https://foo.com/bar',
        });
        (0, chai_1.expect)((0, lists_1.f) `||foo$domain=~bar.*`).not.to.matchRequest({
            sourceUrl: 'http://bar.co.uk',
            url: 'https://foo.com/bar',
        });
        (0, chai_1.expect)((0, lists_1.f) `||foo$domain=~bar.com`).not.to.matchRequest({
            sourceUrl: 'http://sub.bar.com',
            url: 'https://foo.com/bar',
        });
        (0, chai_1.expect)((0, lists_1.f) `||foo$domain=~sub1.bar.com`).not.to.matchRequest({
            sourceUrl: 'http://sub2.sub1.bar.com',
            url: 'https://foo.com/bar',
        });
        // denyallow
        (0, chai_1.expect)((0, lists_1.f) `*$3p,denyallow=x.com|y.com,domain=a.com|b.com`).to.matchRequest({
            sourceUrl: 'https://a.com',
            url: 'https://z.com/bar',
            type: 'script',
        });
        (0, chai_1.expect)((0, lists_1.f) `*$3p,denyallow=x.com|y.com,domain=a.com|b.com`).to.matchRequest({
            sourceUrl: 'https://b.com',
            url: 'https://z.com/bar',
            type: 'script',
        });
        (0, chai_1.expect)((0, lists_1.f) `*$3p,denyallow=x.com|y.com,domain=a.com|b.com`).to.matchRequest({
            sourceUrl: 'https://sub.b.com',
            url: 'https://z.com/bar',
            type: 'script',
        });
        (0, chai_1.expect)((0, lists_1.f) `*$3p,denyallow=x.com|y.com,domain=a.com|b.com`).to.not.matchRequest({
            sourceUrl: 'https://a.com',
            url: 'https://x.com/bar',
            type: 'script',
        });
        (0, chai_1.expect)((0, lists_1.f) `*$3p,denyallow=x.com|y.com,domain=a.com|b.com`).to.not.matchRequest({
            sourceUrl: 'https://a.com',
            url: 'https://sub.y.com/bar',
            type: 'script',
        });
        (0, chai_1.expect)((0, lists_1.f) `*$3p,denyallow=x.com|y.com,domain=a.com|b.com`).to.not.matchRequest({
            sourceUrl: 'https://sub.b.com',
            url: 'https://sub.y.com/bar',
            type: 'script',
        });
        (0, chai_1.expect)((0, lists_1.f) `*$3p,denyallow=x.com|y.com,domain=a.com|b.com`).to.not.matchRequest({
            sourceUrl: 'https://c.com',
            url: 'https://sub.y.com/bar',
            type: 'script',
        });
    });
});
describe('#CosmeticFilter.match', () => {
    it('does not match with hostname constraint but none provided', () => {
        (0, chai_1.expect)((0, lists_1.f) `domain.com##.selector`).not.to.matchHostname('');
        (0, chai_1.expect)((0, lists_1.f) `domain.*##.selector`).not.to.matchHostname('');
        (0, chai_1.expect)((0, lists_1.f) `~domain.*##.selector`).not.to.matchHostname('');
        (0, chai_1.expect)((0, lists_1.f) `~domain.com##.selector`).not.to.matchHostname('');
    });
    it('genercic filter', () => {
        (0, chai_1.expect)((0, lists_1.f) `##.selector`).to.matchHostname('foo.com');
    });
    it('single domain', () => {
        (0, chai_1.expect)((0, lists_1.f) `foo.com##.selector`).to.matchHostname('foo.com');
        (0, chai_1.expect)((0, lists_1.f) `foo.com##.selector`).not.to.matchHostname('bar.com');
    });
    it('multiple domains', () => {
        (0, chai_1.expect)((0, lists_1.f) `foo.com,test.com##.selector`).to.matchHostname('foo.com');
        (0, chai_1.expect)((0, lists_1.f) `foo.com,test.com##.selector`).to.matchHostname('test.com');
        (0, chai_1.expect)((0, lists_1.f) `foo.com,test.com##.selector`).not.to.matchHostname('baz.com');
    });
    it('subdomain', () => {
        (0, chai_1.expect)((0, lists_1.f) `foo.com,test.com##.selector`).to.matchHostname('sub.test.com');
        (0, chai_1.expect)((0, lists_1.f) `foo.com,test.com##.selector`).to.matchHostname('sub.foo.com');
        (0, chai_1.expect)((0, lists_1.f) `foo.com,sub.test.com##.selector`).to.matchHostname('sub.test.com');
        (0, chai_1.expect)((0, lists_1.f) `foo.com,sub.test.com##.selector`).not.to.matchHostname('test.com');
        (0, chai_1.expect)((0, lists_1.f) `foo.com,sub.test.com##.selector`).not.to.matchHostname('com');
    });
    it('entity', () => {
        (0, chai_1.expect)((0, lists_1.f) `foo.com,sub.test.*##.selector`).to.matchHostname('foo.com');
        (0, chai_1.expect)((0, lists_1.f) `foo.com,sub.test.*##.selector`).to.matchHostname('bar.foo.com');
        (0, chai_1.expect)((0, lists_1.f) `foo.com,sub.test.*##.selector`).to.matchHostname('sub.test.com');
        (0, chai_1.expect)((0, lists_1.f) `foo.com,sub.test.*##.selector`).to.matchHostname('sub.test.fr');
        (0, chai_1.expect)((0, lists_1.f) `foo.com,sub.test.*##.selector`).not.to.matchHostname('sub.test.evil.biz');
        (0, chai_1.expect)((0, lists_1.f) `foo.*##.selector`).to.matchHostname('foo.co.uk');
        (0, chai_1.expect)((0, lists_1.f) `foo.*##.selector`).to.matchHostname('bar.foo.co.uk');
        (0, chai_1.expect)((0, lists_1.f) `foo.*##.selector`).to.matchHostname('baz.bar.foo.co.uk');
        (0, chai_1.expect)((0, lists_1.f) `foo.*##.selector`).not.to.matchHostname('foo.evil.biz');
    });
    it('does not match', () => {
        (0, chai_1.expect)((0, lists_1.f) `foo.*##.selector`).not.to.matchHostname('foo.bar.com');
        (0, chai_1.expect)((0, lists_1.f) `foo.*##.selector`).not.to.matchHostname('bar-foo.com');
    });
    describe('negations', () => {
        it('entity', () => {
            (0, chai_1.expect)((0, lists_1.f) `~foo.*##.selector`).not.to.matchHostname('foo.com');
            (0, chai_1.expect)((0, lists_1.f) `~foo.*##.selector`).to.matchHostname('foo.evil.biz');
            (0, chai_1.expect)((0, lists_1.f) `~foo.*,~bar.*##.selector`).to.matchHostname('baz.com');
            (0, chai_1.expect)((0, lists_1.f) `~foo.*,~bar.*##.selector`).not.to.matchHostname('foo.com');
            (0, chai_1.expect)((0, lists_1.f) `~foo.*,~bar.*##.selector`).not.to.matchHostname('sub.foo.com');
            (0, chai_1.expect)((0, lists_1.f) `~foo.*,~bar.*##.selector`).not.to.matchHostname('bar.com');
            (0, chai_1.expect)((0, lists_1.f) `~foo.*,~bar.*##.selector`).not.to.matchHostname('sub.bar.com');
        });
        it('hostnames', () => {
            (0, chai_1.expect)((0, lists_1.f) `~foo.com##.selector`).not.to.matchHostname('foo.com');
            (0, chai_1.expect)((0, lists_1.f) `~foo.com##.selector`).not.to.matchHostname('bar.foo.com');
            (0, chai_1.expect)((0, lists_1.f) `~foo.com##.selector`).to.matchHostname('foo.com.bar');
            (0, chai_1.expect)((0, lists_1.f) `~foo.com##.selector`).to.matchHostname('foo.co.uk');
            (0, chai_1.expect)((0, lists_1.f) `~foo.com##.selector`).to.matchHostname('foo.co.uk');
            (0, chai_1.expect)((0, lists_1.f) `~foo.com,~foo.de,~bar.com##.selector`).not.to.matchHostname('foo.com');
            (0, chai_1.expect)((0, lists_1.f) `~foo.com,~foo.de,~bar.com##.selector`).not.to.matchHostname('sub.foo.com');
            (0, chai_1.expect)((0, lists_1.f) `~foo.com,~foo.de,~bar.com##.selector`).not.to.matchHostname('foo.de');
            (0, chai_1.expect)((0, lists_1.f) `~foo.com,~foo.de,~bar.com##.selector`).not.to.matchHostname('sub.foo.de');
            (0, chai_1.expect)((0, lists_1.f) `~foo.com,~foo.de,~bar.com##.selector`).not.to.matchHostname('bar.com');
            (0, chai_1.expect)((0, lists_1.f) `~foo.com,~foo.de,~bar.com##.selector`).not.to.matchHostname('sub.bar.com');
            (0, chai_1.expect)((0, lists_1.f) `~foo.com,~foo.de,~bar.com##.selector`).to.matchHostname('bar.de');
            (0, chai_1.expect)((0, lists_1.f) `~foo.com,~foo.de,~bar.com##.selector`).to.matchHostname('sub.bar.de');
        });
    });
    describe('complex', () => {
        it('handles entity with suffix exception', () => {
            (0, chai_1.expect)((0, lists_1.f) `foo.*,~foo.com##.selector`).not.to.matchHostname('foo.com');
            (0, chai_1.expect)((0, lists_1.f) `foo.*,~foo.com##.selector`).not.to.matchHostname('sub.foo.com');
            (0, chai_1.expect)((0, lists_1.f) `foo.*,~foo.com##.selector`).to.matchHostname('foo.de');
            (0, chai_1.expect)((0, lists_1.f) `foo.*,~foo.com##.selector`).to.matchHostname('sub.foo.de');
        });
        it('handles entity with subdomain exception', () => {
            (0, chai_1.expect)((0, lists_1.f) `foo.*,~sub.foo.*##.selector`).to.matchHostname('foo.com');
            (0, chai_1.expect)((0, lists_1.f) `foo.*,~sub.foo.*##.selector`).to.matchHostname('foo.de');
            (0, chai_1.expect)((0, lists_1.f) `foo.*,~sub.foo.*##.selector`).not.to.matchHostname('sub.foo.de');
            (0, chai_1.expect)((0, lists_1.f) `foo.*,~sub.foo.*##.selector`).not.to.matchHostname('sub.foo.com');
            (0, chai_1.expect)((0, lists_1.f) `foo.*,~sub.foo.*##.selector`).to.matchHostname('sub2.foo.com');
        });
    });
    it('no domain provided', () => {
        const parsed = cosmetic_1.default.parse('foo.*##.selector');
        (0, chai_1.expect)(parsed).not.to.be.null;
        if (parsed !== null) {
            (0, chai_1.expect)(parsed.match('foo.com', '')).to.be.false;
        }
    });
});
describe('#getHostnameWithoutPublicSuffix', () => {
    it('returns null for empty hostname', () => {
        (0, chai_1.expect)((0, request_1.getHostnameWithoutPublicSuffix)('', '')).to.be.null;
    });
    it('returns null for empty domain', () => {
        (0, chai_1.expect)((0, request_1.getHostnameWithoutPublicSuffix)('com', '')).to.be.null;
    });
    it('returns null for a single label', () => {
        (0, chai_1.expect)((0, request_1.getHostnameWithoutPublicSuffix)('com', 'com')).to.be.null;
    });
    it('simple domain', () => {
        (0, chai_1.expect)((0, request_1.getHostnameWithoutPublicSuffix)('foo.com', 'foo.com')).to.equal('foo');
    });
    it('with subdomain', () => {
        (0, chai_1.expect)((0, request_1.getHostnameWithoutPublicSuffix)('foo.bar.com', 'bar.com')).to.equal('foo.bar');
    });
});
describe('#getHashesFromLabelsBackward', () => {
    it('hash all labels', () => {
        (0, chai_1.expect)((0, request_1.getHashesFromLabelsBackward)('foo.bar.baz', 11, 11)).to.eql(new Uint32Array(['baz', 'bar.baz', 'foo.bar.baz'].map(request_1.hashHostnameBackward)));
    });
    it('hash subdomains only', () => {
        (0, chai_1.expect)((0, request_1.getHashesFromLabelsBackward)('foo.bar.baz.com', 15, 8 /* start of domain */)).to.eql(new Uint32Array(['baz.com', 'bar.baz.com', 'foo.bar.baz.com'].map(request_1.hashHostnameBackward)));
    });
    it('hash ignoring suffix', () => {
        (0, chai_1.expect)((0, request_1.getHashesFromLabelsBackward)('foo.bar.baz.com', 11, 11)).to.eql(new Uint32Array(['baz', 'bar.baz', 'foo.bar.baz'].map(request_1.hashHostnameBackward)));
    });
    it('hash subdomains only, ignoring suffix', () => {
        (0, chai_1.expect)((0, request_1.getHashesFromLabelsBackward)('foo.bar.baz.com', 11, 8)).to.eql(new Uint32Array(['baz', 'bar.baz', 'foo.bar.baz'].map(request_1.hashHostnameBackward)));
    });
});
//# sourceMappingURL=matching.test.js.map