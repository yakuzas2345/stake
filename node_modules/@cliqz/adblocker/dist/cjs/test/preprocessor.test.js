"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("mocha");
const preprocessor_1 = require("../src/preprocessor");
const engine_1 = require("../src/engine/engine");
const adblocker_1 = require("../adblocker");
describe('conditions', () => {
    it('resolves a condition', () => {
        const localEnv = new preprocessor_1.Env();
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('false', localEnv), 'evaluates non-existing value to false').to.be.false;
        localEnv.set('ext_ghostery', true);
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('ext_ghostery', localEnv), 'evaluates existing value to true').to.be.true;
        localEnv.set('ext_ubol', false);
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('ext_ubol', localEnv), 'evaluates falsy value to false').to.be.false;
    });
    const env = new preprocessor_1.Env();
    env.set('ext_ghostery', true);
    env.set('ext_ublock', true);
    it('resolves AND conditions', () => {
        // For later performance reasons, we don't support directly calculating conditions with spaces
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('ext_ghostery&&ext_ublock', env)).to.be.true;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('ext_ghostery&&false', env)).to.be.false;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('false&&ext_ghostery', env)).to.be.false;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('ext_ghostery&&false&&ext_ublock', env)).to.be.false;
    });
    it('resolves OR conditions', () => {
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('ext_ghostery||ext_ublock', env)).to.be.true;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('ext_ghostery||false', env)).to.be.true;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('false||ext_ghostery', env)).to.be.true;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('ext_ghostery||false||ext_ublock', env)).to.be.true;
    });
    it('resolves mixed conditions', () => {
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('ext_ghostery||false&&ext_ublock', env)).to.be.true;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('false||ext_ghostery||false', env)).to.be.true;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('somethingcannotexiststring&&ext_ublock||false', env)).to.be.false;
    });
    it('resolves parenthesis', () => {
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('(true)', env)).to.be.true;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('((true))', env)).to.be.true;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('(true||false)&&true', env)).to.be.true;
    });
    it('drops invalid conditions', () => {
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('', env)).to.be.false;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('||', env)).to.be.false;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('true&&', env)).to.be.false;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('&&true', env)).to.be.false;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('&&true&&', env)).to.be.false;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('*', env)).to.be.false;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('(', env)).to.be.false;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)(')', env)).to.be.false;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('()', env)).to.be.false;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('true&&()', env)).to.be.false;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('true)', env)).to.be.false;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('(true', env)).to.be.false;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('((true)', env)).to.be.false;
        (0, chai_1.expect)((0, preprocessor_1.evaluate)('true((true)', env)).to.be.false;
    });
});
describe('preprocessors', () => {
    const requests = {
        foo: adblocker_1.Request.fromRawDetails({ url: 'https://foo.com' }),
        bar: adblocker_1.Request.fromRawDetails({ url: 'https://bar.com' }),
    };
    const env = new preprocessor_1.Env();
    env.set('ext_ghostery', true);
    env.set('ext_devbuild', true);
    const doTest = (filters, thisEnv = env) => {
        const customErrorMessage = (request, filters, env) => {
            return `Engine should match request ${request.url} for filters: \n\n${filters}\n\n with env \n\n${JSON.stringify(env, null, 2)}\n\n`;
        };
        const engine1 = engine_1.default.parse(filters, {
            loadPreprocessors: true,
        });
        engine1.updateEnv(thisEnv);
        (0, chai_1.expect)(engine1.match(requests.foo), customErrorMessage(requests.foo, filters, thisEnv)).to.have.property('match', true);
        (0, chai_1.expect)(engine1.match(requests.bar), customErrorMessage(requests.bar, filters, thisEnv)).to.have.property('match', false);
        const engine2 = new engine_1.default({ config: { loadPreprocessors: true } });
        const diff = (0, adblocker_1.generateDiff)('', filters, engine2.config);
        engine2.updateFromDiff(diff, thisEnv);
        (0, chai_1.expect)(engine2.match(requests.foo), customErrorMessage(requests.foo, filters, thisEnv)).to.have.property('match', true);
        (0, chai_1.expect)(engine2.match(requests.bar), customErrorMessage(requests.bar, filters, thisEnv)).to.have.property('match', false);
    };
    // Testing `!#else` means we already aware of parenthesis.
    it('resolves a condition', () => {
        doTest(`!#if ext_ghostery
||foo.com^
!#else
||bar.com^
!#endif`);
        doTest(`!#if false
||bar.com^
!#else
||foo.com^
!#endif`);
    });
    it('resolves multiple conditions', () => {
        doTest(`!#if ext_ghostery && ext_devbuild
||foo.com^
!#else
||bar.com^
!#endif`);
        doTest(`!#if false || ext_devbuild
||foo.com^
!#else
||bar.com^
!#endif`);
        doTest(`!#if ext_devbuild || false
||foo.com^
!#else
||bar.com^
!#endif`);
    });
    it('resolves conditions with spaces', () => {
        doTest(`!#if ext_ghostery      && ext_devbuild
||foo.com^
!#else
||bar.com^
!#endif`);
    });
    it('resolves nested conditions', () => {
        doTest(`!#if ext_ghostery
||foo.com^
!#if false
||bar.com^
!#endif
!#endif`);
        doTest(`!#if ext_ghostery
!#if ext_devbuild
||foo.com^
!#else
||bar.com^
!#endif
!#endif`);
        doTest(`!#if false
||bar.com^
!#else
!#if ext_ghostery
||foo.com^
!#endif
!#endif`);
    });
    it('resolves spread conditions', () => {
        doTest(`!#if ext_ghostery
!#if false
||bar.com^
!#endif
!#if ext_devbuild
||foo.com^
!#endif
!#endif`);
    });
    it('ignores all conditions with empty env', () => {
        const emptyEnv = new preprocessor_1.Env();
        emptyEnv.set('true', false);
        doTest(`||foo.com^
!#if false
||bar.com^
!#endif
!#if ext_devbuild
@@||foo.com^
!#endif
!#if true
@@||foo.com^
!#endif`, emptyEnv);
    });
    it('rejects a filter even any of conditions fail', () => {
        doTest(`||foo.com^
!#if ext_ghostery
@@||foo.com^
!#endif
!#if false
@@||foo.com^
!#endif`);
    });
    it('rejects filter with conflicting conditions', () => {
        doTest(`||foo.com^
!#if ext_ghostery
||bar.com^
!#else
||bar.com^
!#endif`);
        doTest(`||foo.com^
!#if !ext_ghostery
||bar.com^
!#endif
!#if ext_ghostery
||bar.com^
!#endif`);
    });
});
//# sourceMappingURL=preprocessor.test.js.map