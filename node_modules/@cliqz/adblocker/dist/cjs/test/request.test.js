"use strict";
/*!
 * Copyright (c) 2017-present Cliqz GmbH. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("mocha");
const request_1 = require("../src/request");
describe('#Request', () => {
    describe('#fromRawDetails', () => {
        it('sets default type', () => {
            (0, chai_1.expect)(request_1.default.fromRawDetails({})).to.deep.include({ type: 'main_frame' });
        });
        it('gets type from arguments', () => {
            (0, chai_1.expect)(request_1.default.fromRawDetails({ type: 'script' })).to.deep.include({ type: 'script' });
        });
        it('sets default url to empty', () => {
            (0, chai_1.expect)(request_1.default.fromRawDetails({})).to.deep.include({
                domain: '',
                hostname: '',
                url: '',
            });
        });
        it('converts url to lower case', () => {
            (0, chai_1.expect)(request_1.default.fromRawDetails({ url: 'https://sub.FOO.cOm/bar' })).to.deep.include({
                domain: 'foo.com',
                hostname: 'sub.foo.com',
                url: 'https://sub.foo.com/bar',
            });
        });
        it('parses url', () => {
            (0, chai_1.expect)(request_1.default.fromRawDetails({ url: 'https://sub.foo.com/bar' })).to.deep.include({
                domain: 'foo.com',
                hostname: 'sub.foo.com',
                url: 'https://sub.foo.com/bar',
            });
        });
        it('does not parse url if hostname and domain provided', () => {
            (0, chai_1.expect)(request_1.default.fromRawDetails({
                domain: 'PROVIDED DOMAIN',
                hostname: 'PROVIDED HOSTNAME',
                url: 'https://sub.foo.com/bar',
            })).to.deep.include({
                domain: 'PROVIDED DOMAIN',
                hostname: 'PROVIDED HOSTNAME',
                url: 'https://sub.foo.com/bar',
            });
        });
        it('parses url if only hostname is provided', () => {
            (0, chai_1.expect)(request_1.default.fromRawDetails({
                hostname: 'PROVIDED HOSTNAME',
                url: 'https://sub.foo.com/bar',
            })).to.deep.include({
                domain: 'foo.com',
                hostname: 'PROVIDED HOSTNAME',
                url: 'https://sub.foo.com/bar',
            });
        });
        it('parses url if only domain is provided', () => {
            (0, chai_1.expect)(request_1.default.fromRawDetails({
                domain: 'PROVIDED DOMAIN',
                url: 'https://sub.foo.com/bar',
            })).to.deep.include({
                domain: 'PROVIDED DOMAIN',
                hostname: 'sub.foo.com',
                url: 'https://sub.foo.com/bar',
            });
        });
        it('sets default sourceUrl to empty', () => {
            (0, chai_1.expect)(request_1.default.fromRawDetails({})).to.deep.include({
                sourceHostnameHashes: new Uint32Array(0),
            });
        });
        it('converts sourceUrl to lower case', () => {
            (0, chai_1.expect)(request_1.default.fromRawDetails({ sourceUrl: 'https://sub.FOO.cOm/bar' })).to.deep.include({
                sourceHostnameHashes: (0, request_1.getHostnameHashesFromLabelsBackward)('sub.foo.com', 'foo.com'),
            });
        });
        it('parses sourceUrl', () => {
            (0, chai_1.expect)(request_1.default.fromRawDetails({ sourceUrl: 'https://sub.foo.com/bar' })).to.deep.include({
                sourceHostnameHashes: (0, request_1.getHostnameHashesFromLabelsBackward)('sub.foo.com', 'foo.com'),
            });
        });
        it('does not parse sourceUrl if hostname and domain provided', () => {
            (0, chai_1.expect)(request_1.default.fromRawDetails({
                sourceDomain: 'provided.domain',
                sourceHostname: 'hostname.provided.domain',
                sourceUrl: 'https://sub.foo.com/bar',
            })).to.deep.include({
                sourceHostnameHashes: (0, request_1.getHostnameHashesFromLabelsBackward)('hostname.provided.domain', 'provided.domain'),
            });
        });
        it('parses sourceUrl if only hostname is provided', () => {
            (0, chai_1.expect)(request_1.default.fromRawDetails({
                sourceHostname: 'hostname.provided.domain',
                sourceUrl: 'https://sub.foo.com/bar',
            })).to.deep.include({
                sourceHostnameHashes: (0, request_1.getHostnameHashesFromLabelsBackward)('hostname.provided.domain', 'provided.domain'),
            });
        });
        it('fallback to domain for hostname value', () => {
            (0, chai_1.expect)(request_1.default.fromRawDetails({
                sourceDomain: 'provided.domain',
                sourceUrl: 'https://sub.foo.com/bar',
            })).to.deep.include({
                sourceHostnameHashes: (0, request_1.getHostnameHashesFromLabelsBackward)('provided.domain', 'provided.domain'),
            });
        });
        it('overrides type for websocket requests', () => {
            (0, chai_1.expect)(request_1.default.fromRawDetails({ url: 'ws://foo.com' }).type).to.equal('websocket');
            (0, chai_1.expect)(request_1.default.fromRawDetails({ url: 'wss://foo.com' }).type).to.equal('websocket');
        });
        it('supports http protocol', () => {
            const expected = {
                isHttp: true,
                isHttps: false,
                isSupported: true,
            };
            (0, chai_1.expect)(request_1.default.fromRawDetails({ url: 'http:///foo.com' })).to.deep.include(expected);
            (0, chai_1.expect)(request_1.default.fromRawDetails({ url: 'http://foo.com' })).to.deep.include(expected);
            (0, chai_1.expect)(request_1.default.fromRawDetails({ url: 'http:/foo.com' })).to.deep.include(expected);
        });
        it('supports https protocol', () => {
            const expected = {
                isHttp: false,
                isHttps: true,
                isSupported: true,
            };
            (0, chai_1.expect)(request_1.default.fromRawDetails({ url: 'https:///foo.com' })).to.deep.include(expected);
            (0, chai_1.expect)(request_1.default.fromRawDetails({ url: 'https://foo.com' })).to.deep.include(expected);
            (0, chai_1.expect)(request_1.default.fromRawDetails({ url: 'https:/foo.com' })).to.deep.include(expected);
        });
        it('supports ws protocol', () => {
            const expected = {
                isHttp: false,
                isHttps: false,
                isSupported: true,
            };
            (0, chai_1.expect)(request_1.default.fromRawDetails({ url: 'ws:///foo.com' })).to.deep.include(expected);
            (0, chai_1.expect)(request_1.default.fromRawDetails({ url: 'ws://foo.com' })).to.deep.include(expected);
            (0, chai_1.expect)(request_1.default.fromRawDetails({ url: 'ws:/foo.com' })).to.deep.include(expected);
        });
        it('supports wss protocol', () => {
            const expected = {
                isHttp: false,
                isHttps: false,
                isSupported: true,
            };
            (0, chai_1.expect)(request_1.default.fromRawDetails({ url: 'wss:///foo.com' })).to.deep.include(expected);
            (0, chai_1.expect)(request_1.default.fromRawDetails({ url: 'wss://foo.com' })).to.deep.include(expected);
            (0, chai_1.expect)(request_1.default.fromRawDetails({ url: 'wss:/foo.com' })).to.deep.include(expected);
        });
        it('handles data urls', () => {
            for (const url of [
                'data:,Hello%2C%20World!',
                'data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D',
                'data:text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E',
                'data:text/html,<script>alert("hi");</script>',
            ]) {
                const cleanUrl = url.slice(0, url.indexOf(','));
                (0, chai_1.expect)(request_1.default.fromRawDetails({ url })).to.deep.include({
                    isHttp: false,
                    isHttps: false,
                    isSupported: true,
                    url: cleanUrl,
                });
            }
        });
        it('detects unsupported protocols', () => {
            const expected = {
                isHttp: false,
                isHttps: false,
                isSupported: false,
            };
            for (const protocol of ['foobar', 'ip', 'ftp', 'git', 'ssh', 'smtp', 'pop3', 'imap']) {
                (0, chai_1.expect)(request_1.default.fromRawDetails({ url: `${protocol}:///foo.com` })).to.deep.include(expected);
                (0, chai_1.expect)(request_1.default.fromRawDetails({ url: `${protocol}://foo.com` })).to.deep.include(expected);
                (0, chai_1.expect)(request_1.default.fromRawDetails({ url: `${protocol}:/foo.com` })).to.deep.include(expected);
            }
        });
        describe('finds partyness', () => {
            it('considers as first-party if type is main_frame', () => {
                (0, chai_1.expect)(request_1.default.fromRawDetails({
                    sourceUrl: 'https://sub1.sub2.bar.com',
                    url: 'https://foo.com',
                })).to.deep.include({
                    isFirstParty: true,
                    isThirdParty: false,
                });
            });
            it('correctly uses domains when available if type not main_frame', () => {
                (0, chai_1.expect)(request_1.default.fromRawDetails({
                    url: 'https://foo.com',
                    sourceUrl: 'https://foo.com',
                    type: 'script',
                })).to.deep.include({
                    isFirstParty: true,
                    isThirdParty: false,
                });
                (0, chai_1.expect)(request_1.default.fromRawDetails({
                    sourceUrl: 'https://sub1.sub2.foo.com',
                    url: 'https://foo.com',
                    type: 'script',
                })).to.deep.include({
                    isFirstParty: true,
                    isThirdParty: false,
                });
                (0, chai_1.expect)(request_1.default.fromRawDetails({
                    sourceUrl: 'https://sub1.sub2.bar.com',
                    url: 'https://foo.com',
                    type: 'script',
                })).to.deep.include({
                    isFirstParty: false,
                    isThirdParty: true,
                });
                (0, chai_1.expect)(request_1.default.fromRawDetails({
                    sourceUrl: 'https://localhost:4242/',
                    url: 'https://foo.com',
                    type: 'script',
                })).to.deep.include({
                    isFirstParty: false,
                    isThirdParty: true,
                });
            });
            it('falls-back to first-party if no sourceUrl and type not main_frame', () => {
                (0, chai_1.expect)(request_1.default.fromRawDetails({
                    url: 'https://foo.com',
                    type: 'script',
                })).to.deep.include({
                    isFirstParty: true,
                    isThirdParty: false,
                });
            });
            it('falls-back to first-party if no url and type not main_frame', () => {
                (0, chai_1.expect)(request_1.default.fromRawDetails({
                    sourceUrl: 'null',
                    type: 'script',
                })).to.deep.include({
                    isFirstParty: true,
                    isThirdParty: false,
                });
            });
        });
    });
});
//# sourceMappingURL=request.test.js.map