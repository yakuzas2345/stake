"use strict";
/*!
 * Copyright (c) 2017-present Cliqz GmbH. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("mocha");
const compact_set_1 = require("../src/compact-set");
function a(strings) {
    const str = strings.raw[0];
    const array = new Uint32Array(str.length);
    for (let i = 0; i < str.length; i += 1) {
        array[i] = str.charCodeAt(i);
    }
    return array;
}
it('#compactTokens', () => {
    (0, chai_1.expect)((0, compact_set_1.compactTokens)(a ``)).to.eql(a ``);
    (0, chai_1.expect)((0, compact_set_1.compactTokens)(a `b`)).to.eql(a `b`);
    (0, chai_1.expect)((0, compact_set_1.compactTokens)(a `foo`)).to.eql(a `fo`);
    (0, chai_1.expect)((0, compact_set_1.compactTokens)(a `bbbaaacc`)).to.eql(a `abc`);
});
it('#hasEmptyIntersection', () => {
    (0, chai_1.expect)((0, compact_set_1.hasEmptyIntersection)(a `abcde`, a `efgh`)).to.be.false;
    (0, chai_1.expect)((0, compact_set_1.hasEmptyIntersection)(a `efgh`, a `abcde`)).to.be.false;
    (0, chai_1.expect)((0, compact_set_1.hasEmptyIntersection)(a `bcde`, a `aefgh`)).to.be.false;
    (0, chai_1.expect)((0, compact_set_1.hasEmptyIntersection)(a `abcde`, a `fgh`)).to.be.true;
    (0, chai_1.expect)((0, compact_set_1.hasEmptyIntersection)(a ``, a ``)).to.be.true;
    (0, chai_1.expect)((0, compact_set_1.hasEmptyIntersection)(a `abc`, a ``)).to.be.true;
    (0, chai_1.expect)((0, compact_set_1.hasEmptyIntersection)(a ``, a `abc`)).to.be.true;
    (0, chai_1.expect)((0, compact_set_1.hasEmptyIntersection)(a ``, a `abc`)).to.be.true;
});
it('#mergeCompactSets', () => {
    (0, chai_1.expect)((0, compact_set_1.mergeCompactSets)([a ``, a ``])).to.eql(a ``);
    (0, chai_1.expect)((0, compact_set_1.mergeCompactSets)([a ``, a `cde`])).to.eql(a `cde`);
    (0, chai_1.expect)((0, compact_set_1.mergeCompactSets)([a `abc`, a ``])).to.eql(a `abc`);
    (0, chai_1.expect)((0, compact_set_1.mergeCompactSets)([a `abc`, a `cde`])).to.eql(a `abcde`);
    (0, chai_1.expect)((0, compact_set_1.mergeCompactSets)([a `abc`, a `def`])).to.eql(a `abcdef`);
    (0, chai_1.expect)((0, compact_set_1.mergeCompactSets)([a `cba`, a `cde`])).to.eql(a `abcde`);
    (0, chai_1.expect)((0, compact_set_1.mergeCompactSets)([a `c`, a `b`, a `a`, a `cde`])).to.eql(a `abcde`);
});
//# sourceMappingURL=compact-set.test.js.map