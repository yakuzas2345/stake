"use strict";
/*!
 * Copyright (c) 2017-present Cliqz GmbH. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("mocha");
const config_1 = require("../../../src/config");
const filters_1 = require("../../../src/engine/bucket/filters");
const cosmetic_1 = require("../../../src/filters/cosmetic");
const network_1 = require("../../../src/filters/network");
const lists_1 = require("../../../src/lists");
const utils_1 = require("../../utils");
describe('#FiltersContainer', () => {
    for (const config of [
        new config_1.default({ enableCompression: true }),
        new config_1.default({ enableCompression: false }),
    ]) {
        describe(`compression = ${config.enableCompression}`, () => {
            describe('#update', () => {
                let container;
                const filters = [
                    network_1.default.parse('||foo.com', true),
                    network_1.default.parse('||bar.com', true),
                    network_1.default.parse('||baz.com', true),
                ];
                beforeEach(() => {
                    container = new filters_1.default({
                        config,
                        deserialize: network_1.default.deserialize,
                        filters: [],
                    });
                });
                it('with no filters', () => {
                    (0, chai_1.expect)(container.getFilters()).to.have.lengthOf(0);
                    container.update([], undefined);
                    (0, chai_1.expect)(container.getFilters()).to.have.lengthOf(0);
                });
                it('with one filter', () => {
                    (0, chai_1.expect)(container.getFilters()).to.have.lengthOf(0);
                    container.update([filters[0]], undefined);
                    (0, chai_1.expect)(container.getFilters().map((f) => f.rawLine)).to.eql([
                        filters[0].rawLine,
                    ]);
                });
                it('with one filter', () => {
                    container.update([filters[0]], undefined);
                    container.update([], undefined);
                    (0, chai_1.expect)(container.getFilters().map((f) => f.rawLine)).to.eql([
                        filters[0].rawLine,
                    ]);
                });
                it('deletes one filter', () => {
                    container.update([filters[0]], undefined);
                    container.update([], new Set([filters[0].getId()]));
                    (0, chai_1.expect)(container.getFilters()).to.have.lengthOf(0);
                });
                it('deletes and adds one filter', () => {
                    container.update([filters[0]], undefined);
                    container.update([filters[1]], new Set([filters[0].getId()]));
                    (0, chai_1.expect)(container.getFilters().map((f) => f.rawLine)).to.eql([
                        filters[1].rawLine,
                    ]);
                });
                it('multiple updates', () => {
                    container.update([filters[0]], undefined);
                    container.update([filters[1], filters[2]], new Set([filters[0].getId()]));
                    (0, chai_1.expect)(container.getFilters().map((f) => f.rawLine)).to.eql([
                        filters[1].rawLine,
                        filters[2].rawLine,
                    ]);
                    container.update([], new Set([filters[2].getId(), filters[1].getId()]));
                    (0, chai_1.expect)(container.getFilters()).to.have.lengthOf(0);
                });
            });
            describe('#getFilters', () => {
                it('network', () => {
                    const filters = (0, lists_1.parseFilters)(utils_1.allLists, {
                        debug: true,
                        loadCosmeticFilters: false,
                    }).networkFilters;
                    (0, chai_1.expect)(new filters_1.default({
                        config,
                        deserialize: network_1.default.deserialize,
                        filters,
                    }).getFilters()).to.eql(filters);
                });
                it('cosmetic', () => {
                    const filters = (0, lists_1.parseFilters)(utils_1.allLists, {
                        debug: true,
                        loadNetworkFilters: false,
                    }).cosmeticFilters;
                    (0, chai_1.expect)(new filters_1.default({
                        config,
                        deserialize: cosmetic_1.default.deserialize,
                        filters,
                    }).getFilters()).to.eql(filters);
                });
            });
        });
    }
});
//# sourceMappingURL=filters.test.js.map