"use strict";
/*!
 * Copyright (c) 2017-present Cliqz GmbH. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("mocha");
const tldts_experimental_1 = require("tldts-experimental");
const engine_1 = require("../../src/engine/engine");
const network_1 = require("../../src/filters/network");
const request_1 = require("../../src/request");
const resources_1 = require("../../src/resources");
const requests_1 = require("../data/requests");
const utils_1 = require("../utils");
/**
 * Helper function used in the Engine tests. All the assertions are performed by
 * this function. It will be called to tests the different configurations of
 * engines, for each of the requests and all of the filters.
 */
function test({ engine, filter, testFiltersInIsolation, resources, request, importants, redirects, exceptions, normalFilters, }) {
    // it(`[engine] isolation=${testFiltersInIsolation} optimized=${engine.enableOptimizations} ${
    //   filter.rawLine
    // }`, () => {
    // Set correct resources in `engine` (`resources` is expected to have been
    // created using the matching redirect filters for the current Request so
    // that all redirect matches will have a corresponding resource in
    // `resources`).
    engine.resources = resources;
    // Collect all matching filters for this request.
    const matchingFilters = new Set();
    for (const matchingFilter of Array.from(engine.matchAll(request))) {
        (matchingFilter.rawLine || '').split(' <+> ').forEach((f) => {
            matchingFilters.add(f);
        });
    }
    // Check if one of the filters is a special case: important,
    // exception or redirect; and perform extra checks then.
    if (filter.isImportant()) {
        const result = engine.match(request);
        (0, chai_1.expect)(result.filter).not.to.be.undefined;
        if (result.filter !== undefined &&
            result.filter.rawLine !== undefined &&
            !result.filter.rawLine.includes('<+>')) {
            (0, chai_1.expect)(importants).to.include(result.filter.rawLine);
            // Handle case where important filter is also a redirect
            if (filter.isRedirect()) {
                (0, chai_1.expect)(redirects).to.include(result.filter.rawLine);
            }
        }
        (0, chai_1.expect)(result.exception).to.be.undefined;
        if (!filter.isRedirect()) {
            (0, chai_1.expect)(result.redirect).to.be.undefined;
        }
        (0, chai_1.expect)(result.match).to.be.true;
    }
    else if (filter.isException() &&
        normalFilters.length !== 0 &&
        !testFiltersInIsolation &&
        importants.length === 0) {
        const result = engine.match(request);
        (0, chai_1.expect)(result.exception).not.to.be.undefined;
        if (result.exception !== undefined &&
            result.exception.rawLine !== undefined &&
            !result.exception.rawLine.includes('<+>')) {
            (0, chai_1.expect)(exceptions).to.include(result.exception.rawLine);
        }
        (0, chai_1.expect)(result.filter).not.to.be.undefined;
        (0, chai_1.expect)(result.redirect).to.be.undefined;
        (0, chai_1.expect)(result.match).to.be.false;
    }
    else if (filter.isRedirect() && exceptions.length === 0 && importants.length === 0) {
        const result = engine.match(request);
        (0, chai_1.expect)(result.filter).not.to.be.undefined;
        if (result.filter !== undefined &&
            result.filter.rawLine !== undefined &&
            !result.filter.rawLine.includes('<+>')) {
            (0, chai_1.expect)(redirects).to.include(result.filter.rawLine);
        }
        (0, chai_1.expect)(result.exception).to.be.undefined;
        (0, chai_1.expect)(result.redirect).not.to.be.undefined;
        (0, chai_1.expect)(result.match).to.be.true;
    }
    (0, chai_1.expect)(matchingFilters).to.include(filter.rawLine);
    // });
}
function buildResourcesFromRequests(filters) {
    const resources = [];
    filters.forEach((filter) => {
        if (filter.redirect !== undefined) {
            const redirect = filter.redirect;
            // Guess resource type
            let type = 'application/javascript';
            if (redirect.endsWith('.gif')) {
                type = 'image/gif;base64';
            }
            resources.push(`${redirect} ${type}\n${redirect}`);
        }
    });
    return resources_1.default.parse(resources.join('\n\n'), { checksum: '' });
}
function createEngine(filters, enableOptimizations = true) {
    return engine_1.default.parse(filters, {
        debug: true,
        enableOptimizations,
    });
}
describe('#FiltersEngine', () => {
    it('network filters are disabled', () => {
        const request = request_1.default.fromRawDetails({ url: 'https://foo.com' });
        // Enabled
        (0, chai_1.expect)(engine_1.default.parse('||foo.com', { loadNetworkFilters: true }).match(request).match).to.be
            .true;
        // Disabled
        (0, chai_1.expect)(engine_1.default.parse('||foo.com', { loadNetworkFilters: false }).match(request).match).to.be
            .false;
    });
    it('cosmetic filters are disabled', () => {
        // Enabled
        (0, chai_1.expect)(engine_1.default.parse('##selector', { loadCosmeticFilters: true }).getCosmeticsFilters({
            domain: 'foo.com',
            hostname: 'foo.com',
            url: 'https://foo.com',
        })).to.eql({
            active: true,
            extended: [],
            scripts: [],
            styles: 'selector { display: none !important; }',
        });
        // Disabled
        (0, chai_1.expect)(engine_1.default.parse('##selector', { loadCosmeticFilters: false }).getCosmeticsFilters({
            domain: 'foo.com',
            hostname: 'foo.com',
            url: 'https://foo.com',
        })).to.eql({
            active: false,
            extended: [],
            scripts: [],
            styles: '',
        });
    });
    describe('cps policies', () => {
        it('no policy in engine', () => {
            (0, chai_1.expect)(createEngine('this is not a csp').getCSPDirectives(request_1.default.fromRawDetails({
                url: 'https://foo.com',
            }))).to.be.undefined;
        });
        it('network filters are disabled', () => {
            (0, chai_1.expect)(engine_1.default.parse('||foo.com$csp=bar', { loadNetworkFilters: false }).getCSPDirectives(request_1.default.fromRawDetails({
                url: 'https://foo.com',
            }))).to.be.undefined;
        });
        it('request not supported', () => {
            // Not supported protocol
            (0, chai_1.expect)(engine_1.default.parse('||foo.com$csp=bar').getCSPDirectives(request_1.default.fromRawDetails({
                url: 'ftp://foo.com',
            }))).to.be.undefined;
            // Not document request
            (0, chai_1.expect)(engine_1.default.parse('||foo.com$csp=bar').getCSPDirectives(request_1.default.fromRawDetails({
                type: 'script',
                url: 'ftp://foo.com',
            }))).to.be.undefined;
        });
        it('does not match request', () => {
            (0, chai_1.expect)(createEngine('||bar.com$csp=bar').getCSPDirectives(request_1.default.fromRawDetails({
                url: 'https://foo.com',
            }))).to.be.undefined;
        });
        it('matches request (1 policy)', () => {
            (0, chai_1.expect)(createEngine('||foo.com$csp=bar').getCSPDirectives(request_1.default.fromRawDetails({
                url: 'https://foo.com',
            }))).to.equal('bar');
        });
        it('matches request (2 policy)', () => {
            const policies = createEngine(`
||foo.com$csp=bar
$csp=baz,domain=bar.com
`).getCSPDirectives(request_1.default.fromRawDetails({
                sourceUrl: 'https://bar.com',
                url: 'https://foo.com',
            }));
            (0, chai_1.expect)(policies).not.to.be.undefined;
            if (policies !== undefined) {
                (0, chai_1.expect)(policies.split('; ').sort()).to.eql(['bar', 'baz']);
            }
        });
        it('matches request (1 policy with one exception)', () => {
            (0, chai_1.expect)(createEngine(`
||foo.com$csp=bar
@@$csp=baz
$csp=baz,domain=bar.com
`).getCSPDirectives(request_1.default.fromRawDetails({
                sourceUrl: 'https://bar.com',
                url: 'https://foo.com',
            }))).to.equal('bar');
        });
        it('exception global exception', () => {
            (0, chai_1.expect)(createEngine(`
@@$csp,domain=bar.com
||foo.com$csp=bar
@@$csp=baz
$csp=baz,domain=bar.com
`).getCSPDirectives(request_1.default.fromRawDetails({
                sourceUrl: 'https://bar.com',
                url: 'https://foo.com',
            }))).to.be.undefined;
        });
    });
    describe('badfilter', () => {
        const request = request_1.default.fromRawDetails({
            sourceUrl: 'https://bar.com',
            type: 'image',
            url: 'https://foo.com',
        });
        // - from Engine.parse
        // - new filter in Engine.update
        // - works after serialization/deserialization?
        it('does not match on its own', () => {
            (0, chai_1.expect)(createEngine('||foo.com$badfilter').match(request).match).to.be.false;
        });
        it('cancels filter with same ID', () => {
            (0, chai_1.expect)(createEngine(`
||foo.com$domain=bar.com|foo.com,badfilter
||foo.com$domain=foo.com|bar.com
`).match(request).match).to.be.false;
        });
        it('does not cancel similar filter', () => {
            (0, chai_1.expect)(createEngine(`
||foo.com$domain=bar.com|foo.com,badfilter
||foo.com$domain=foo.com|bar.com,image
`).match(request).match).to.be.true;
        });
        it('cancels exceptions', () => {
            (0, chai_1.expect)(createEngine(`
@@||foo.com^
||foo.com^
`).match(request).match).to.be.false;
            (0, chai_1.expect)(createEngine(`
@@||foo.com^
@@||foo.com^$badfilter
||foo.com^
`).match(request).match).to.be.true;
        });
        it('works with update as well', () => {
            const badfilter = network_1.default.parse('||foo.com$domain=bar.com|foo.com,badfilter');
            (0, chai_1.expect)(badfilter).not.to.be.null;
            if (badfilter === null) {
                return;
            }
            // Initially, no $badfilter
            const engine = engine_1.default.parse('||foo.com$domain=foo.com|bar.com', { debug: true });
            (0, chai_1.expect)(engine.match(request).match).to.be.true;
            // Add $badfilter
            engine.update({
                newNetworkFilters: [badfilter],
            });
            (0, chai_1.expect)(engine.match(request).match).to.be.false;
            // Remove $badfilter
            engine.update({
                removedNetworkFilters: [badfilter.getId()],
            });
            (0, chai_1.expect)(engine.match(request).match).to.be.true;
        });
    });
    describe('redirect', () => {
        const request = request_1.default.fromRawDetails({
            sourceUrl: 'https://bar.com',
            type: 'image',
            url: 'https://foo.com',
        });
        const createEngineWithResource = (filters, resource) => {
            const engine = createEngine(filters.join('\n'));
            engine.resources.js.set(resource, resource);
            engine.resources.resources.set(resource, {
                body: resource,
                contentType: 'application/javascript',
            });
            return engine;
        };
        it('normal redirect', () => {
            const { filter, exception, match, redirect } = createEngineWithResource(['||foo.com$image,redirect=foo.js'], 'foo.js').match(request);
            (0, chai_1.expect)(match).to.be.true;
            (0, chai_1.expect)(exception).to.be.undefined;
            (0, chai_1.expect)(filter).not.to.be.undefined;
            (0, chai_1.expect)(filter.toString()).to.equal('||foo.com$image,redirect=foo.js');
            (0, chai_1.expect)(redirect).to.eql({
                body: 'foo.js',
                contentType: 'application/javascript',
                dataUrl: 'data:application/javascript;base64,Zm9vLmpz',
            });
        });
        it('redirect-rule does not match on its own', () => {
            const { filter, exception, match, redirect } = createEngineWithResource(['||foo.com$image,redirect-rule=foo.js'], 'foo.js').match(request);
            (0, chai_1.expect)(match).to.be.false;
            (0, chai_1.expect)(exception).to.be.undefined;
            (0, chai_1.expect)(filter).to.be.undefined;
            (0, chai_1.expect)(redirect).to.be.undefined;
        });
        it('redirect-rule matches if request was blocked', () => {
            const { filter, exception, match, redirect } = createEngineWithResource(['||foo.com$image,redirect-rule=foo.js', '||foo.com$image'], 'foo.js').match(request);
            (0, chai_1.expect)(match).to.be.true;
            (0, chai_1.expect)(exception).to.be.undefined;
            (0, chai_1.expect)(filter).not.to.be.undefined;
            (0, chai_1.expect)(filter.toString()).to.equal('||foo.com$image,redirect-rule=foo.js');
            (0, chai_1.expect)(redirect).to.eql({
                body: 'foo.js',
                contentType: 'application/javascript',
                dataUrl: 'data:application/javascript;base64,Zm9vLmpz',
            });
        });
        it('redirect=none cancels redirect-rule', () => {
            const { filter, exception, match, redirect } = createEngineWithResource([
                '||foo.com$image,redirect-rule=foo.js',
                '||foo.com$image',
                '||foo.com$image,redirect=none',
            ], 'foo.js').match(request);
            (0, chai_1.expect)(match).to.be.false;
            (0, chai_1.expect)(exception).not.to.be.undefined;
            (0, chai_1.expect)(exception.toString()).to.equal('||foo.com$image,redirect=none');
            (0, chai_1.expect)(filter).not.to.be.undefined;
            (0, chai_1.expect)(filter.toString()).to.equal('||foo.com$image,redirect-rule=foo.js');
            (0, chai_1.expect)(redirect).to.be.undefined;
        });
        it('redirect=none cancels redirect', () => {
            const { filter, exception, match, redirect } = createEngineWithResource(['||foo.com$image,redirect=foo.js', '||foo.com$image', '||foo.com$image,redirect=none'], 'foo.js').match(request);
            (0, chai_1.expect)(match).to.be.false;
            (0, chai_1.expect)(exception).not.to.be.undefined;
            (0, chai_1.expect)(exception.toString()).to.equal('||foo.com$image,redirect=none');
            (0, chai_1.expect)(filter).not.to.be.undefined;
            (0, chai_1.expect)(filter.toString()).to.equal('||foo.com$image,redirect=foo.js');
            (0, chai_1.expect)(redirect).to.be.undefined;
        });
        it('exception rule also cancels redirect', () => {
            const { filter, exception, match, redirect } = createEngineWithResource(['||foo.com$image,redirect=foo.js', '||foo.com$image', '@@||foo.com$image'], 'foo.js').match(request);
            (0, chai_1.expect)(match).to.be.false;
            (0, chai_1.expect)(exception).not.to.be.undefined;
            (0, chai_1.expect)(exception.toString()).to.equal('@@||foo.com$image');
            (0, chai_1.expect)(filter).not.to.be.undefined;
            (0, chai_1.expect)(filter.toString()).to.equal('||foo.com$image,redirect=foo.js');
            (0, chai_1.expect)(redirect).to.be.undefined;
        });
    });
    describe('network filters', () => {
        // Collect all filters from all requests in the dataset. Each test case
        // contains one request as well as a list of filters matching this request
        // (exceptions, normal filters, etc.). We create a big list of filters out
        // of them.
        const allRequestFilters = requests_1.default.map(({ filters }) => filters.join('\n')).join('\n');
        // Create several base engines to be used in different scenarii:
        // - Engine with *no filter* optimizations *enabled*
        // - Engine with *no filter* optimizations *disabled*
        // - Engine with *all filters* optimizations *enabled*
        // - Engine with *all filters* optimizations *disabled*
        const engineFullOptimized = engine_1.default.parse(allRequestFilters, {
            debug: true,
            enableOptimizations: true,
        });
        const engineFull = engine_1.default.parse(allRequestFilters, {
            debug: true,
            enableOptimizations: false,
        });
        // For each request, make sure that we get the correct match in 4 different
        // setups:
        // - Engine with only the filter being tested
        // - Engine with all the filters
        // - Engine with optimizations enabled
        // - Engine with optimizations disabled
        for (let i = 0; i < requests_1.default.length; i += 1) {
            const { filters, type, url, sourceUrl } = requests_1.default[i];
            // Dispatch `filters` into the following categories: exception, important,
            // redirects or normal filters. This will be used later to check the
            // output of Engine.match. Additionally, we keep the list of NetworkFilter
            // instances.
            const exceptions = [];
            const importants = [];
            const redirects = [];
            const normalFilters = [];
            const parsedFilters = [];
            for (let j = 0; j < filters.length; j += 1) {
                const filter = filters[j];
                const parsed = network_1.default.parse(filter, true);
                (0, chai_1.expect)(parsed).not.to.be.null;
                if (parsed !== null) {
                    parsedFilters.push(parsed);
                    if (parsed.isException()) {
                        exceptions.push(filter);
                    }
                    if (parsed.isImportant()) {
                        importants.push(filter);
                    }
                    if (parsed.isRedirect()) {
                        redirects.push(filter);
                    }
                    if (!parsed.isRedirect() && !parsed.isException() && !parsed.isImportant()) {
                        normalFilters.push(filter);
                    }
                }
            }
            // Prepare a fake `resources.txt` created from the list of filters of type
            // `redirect` in `filters`. A resource of the right name will be created
            // for each of them.
            const resources = buildResourcesFromRequests(parsedFilters);
            // Create an instance of `Request` to be shared for all the calls to
            // `Engine.match` or `Engine.matchAll`.
            const request = request_1.default.fromRawDetails({
                sourceUrl,
                type: type,
                url,
            });
            it(`[request] type=${type} url=${url}, sourceUrl=${sourceUrl}`, () => {
                // Check each filter individually
                for (let j = 0; j < parsedFilters.length; j += 1) {
                    const filter = parsedFilters[j];
                    const baseConfig = {
                        exceptions,
                        filter,
                        importants,
                        normalFilters,
                        redirects,
                        request,
                        resources,
                    };
                    // Engine with only this filter
                    test(Object.assign(Object.assign({}, baseConfig), { engine: new engine_1.default({ networkFilters: [filter] }), testFiltersInIsolation: true }));
                    // All filters with optimizations enabled
                    test(Object.assign(Object.assign({}, baseConfig), { engine: engineFullOptimized, testFiltersInIsolation: false }));
                    // All filters with optimizations disabled
                    test(Object.assign(Object.assign({}, baseConfig), { engine: engineFull, testFiltersInIsolation: false }));
                }
            });
        }
    });
    describe('#getCosmeticsFilters', () => {
        describe('script injections', () => {
            it('injects script', () => {
                const engine = engine_1.default.parse('foo.com##+js(script.js,arg1)');
                engine.resources = resources_1.default.parse('script.js application/javascript\n{{1}}', {
                    checksum: '',
                });
                (0, chai_1.expect)(engine.getCosmeticsFilters({
                    domain: 'foo.com',
                    hostname: 'foo.com',
                    url: 'https://foo.com',
                }).scripts).to.eql(['arg1']);
            });
            it('script missing', () => {
                (0, chai_1.expect)(engine_1.default.parse('foo.com##+js(foo,arg1)').getCosmeticsFilters({
                    domain: 'foo.com',
                    hostname: 'foo.com',
                    url: 'https://foo.com',
                }).scripts).to.eql([]);
            });
        });
        describe('elemhide', () => {
            it('disables cosmetics if domain matches', () => {
                (0, chai_1.expect)(engine_1.default.parse(`
@@||foo.com^$elemhide
foo.com##selector1
##selector1
`).getCosmeticsFilters({ domain: 'foo.com', hostname: 'foo.com', url: 'https://foo.com' })
                    .styles).to.equal('');
            });
        });
        describe('specifichide', () => {
            it('allows specific cosmetics by default', () => {
                (0, chai_1.expect)(engine_1.default.parse('foo.com##selector').getCosmeticsFilters({
                    domain: 'foo.com',
                    hostname: 'foo.com',
                    url: 'https://foo.com',
                }).styles).not.to.equal('');
            });
            it('disables specific cosmetics if domain matches', () => {
                (0, chai_1.expect)(engine_1.default.parse(`
@@||foo.com^$specifichide
foo.com##selector1
`).getCosmeticsFilters({ domain: 'foo.com', hostname: 'foo.com', url: 'https://foo.com' })
                    .styles).to.equal('');
            });
            it('allows specific cosmetics if $specifichide', () => {
                (0, chai_1.expect)(engine_1.default.parse(`
@@||foo.com^$specifichide
foo.com##selector
||foo.com^$specifichide
`).getCosmeticsFilters({ domain: 'foo.com', hostname: 'foo.com', url: 'https://foo.com' })
                    .styles).not.to.equal('');
            });
            it('allows specific cosmetics if $specifichide,important', () => {
                (0, chai_1.expect)(engine_1.default.parse(`
@@||foo.com^$important,specifichide
foo.com##selector
||foo.com^$specifichide,important
`).getCosmeticsFilters({ domain: 'foo.com', hostname: 'foo.com', url: 'https://foo.com' })
                    .styles).not.to.equal('');
            });
            it('disables specific cosmetics if @@$specifichide,important', () => {
                (0, chai_1.expect)(engine_1.default.parse(`
@@||foo.com^$important,specifichide
foo.com##selector
foo.com##.selector
foo.com###selector
||foo.com^$specifichide
`).getCosmeticsFilters({ domain: 'foo.com', hostname: 'foo.com', url: 'https://foo.com' })
                    .styles).to.equal('');
            });
            it('disabling specific hides does not impact scriptlets', () => {
                const engine = engine_1.default.parse(['@@||foo.com^$specifichide', 'foo.com##+js(foo)'].join('\n'));
                engine.resources.js.set('foo', '');
                (0, chai_1.expect)(engine.getCosmeticsFilters({
                    domain: 'foo.com',
                    hostname: 'foo.com',
                    url: 'https://foo.com',
                }).scripts).to.have.lengthOf(1);
            });
        });
        describe('generichide', () => {
            it('allows generic cosmetics by default', () => {
                (0, chai_1.expect)(engine_1.default.parse('##selector').getCosmeticsFilters({
                    domain: 'foo.com',
                    hostname: 'foo.com',
                    url: 'https://foo.com',
                }).styles).not.to.equal('');
            });
            it('disables generic cosmetics if domain matches', () => {
                (0, chai_1.expect)(engine_1.default.parse(`
@@||foo.com^$generichide
~bar.*##selector1
##selector2
`).getCosmeticsFilters({ domain: 'foo.com', hostname: 'foo.com', url: 'https://foo.com' })
                    .styles).to.equal('');
            });
            it('allows generic cosmetics if $generichide', () => {
                (0, chai_1.expect)(engine_1.default.parse(`
@@||foo.com^$generichide
##selector
||foo.com^$generichide
`).getCosmeticsFilters({ domain: 'foo.com', hostname: 'foo.com', url: 'https://foo.com' })
                    .styles).not.to.equal('');
            });
            it('allows generic cosmetics if $generichide,important', () => {
                (0, chai_1.expect)(engine_1.default.parse(`
@@||foo.com^$important,generichide
##selector
||foo.com^$generichide,important
`).getCosmeticsFilters({ domain: 'foo.com', hostname: 'foo.com', url: 'https://foo.com' })
                    .styles).not.to.equal('');
            });
            it('disables generic cosmetics if @@$generichide,important', () => {
                (0, chai_1.expect)(engine_1.default.parse(`
@@||foo.com^$important,generichide
##selector
##.selector
###selector
||foo.com^$generichide
`).getCosmeticsFilters({ domain: 'foo.com', hostname: 'foo.com', url: 'https://foo.com' })
                    .styles).to.equal('');
            });
        });
        it('handles custom :styles', () => {
            (0, chai_1.expect)(engine_1.default.parse(`
##selector :style(foo)
##selector :style(bar)
##selector1 :style(foo)`).getCosmeticsFilters({ domain: 'foo.com', hostname: 'foo.com', url: 'https://foo.com' })
                .styles).to.equal('selector ,\nselector1  { foo }\n\nselector  { bar }');
        });
        [
            // Unhide
            // ======
            // = unhide without domain
            {
                filters: ['##selector'],
                hostname: 'foo.com',
                injections: [],
                matches: ['selector'],
            },
            {
                filters: ['#@#selector', '##selector'],
                hostname: 'foo.com',
                injections: [],
                matches: [],
            },
            // = unhide without domain + class
            {
                classes: ['selector'],
                filters: ['##.selector'],
                hostname: 'foo.com',
                injections: [],
                matches: ['.selector'],
            },
            {
                classes: ['selector'],
                filters: ['#@#.selector', '##.selector'],
                hostname: 'foo.com',
                injections: [],
                matches: [],
            },
            // = unhide without domain + id
            {
                filters: ['###selector'],
                hostname: 'foo.com',
                ids: ['selector'],
                injections: [],
                matches: ['#selector'],
            },
            {
                filters: ['###selector', '#@##selector'],
                hostname: 'foo.com',
                ids: ['selector'],
                injections: [],
                matches: [],
            },
            // = unhide without domain + href
            {
                filters: ['##a[href="https://foo"]'],
                hostname: 'foo.com',
                hrefs: ['https://foo.com/bar'],
                injections: [],
                matches: ['a[href="https://foo"]'],
            },
            {
                filters: ['##a[href="https://foo"]', '#@#a[href="https://foo"]'],
                hostname: 'foo.com',
                hrefs: ['https://foo.com/bar'],
                injections: [],
                matches: [],
            },
            // = unhide +js() exception
            {
                filters: ['foo.com##+js(scriptlet)'],
                hostname: 'foo.com',
                hrefs: [],
                injections: ['scriptlet'],
                matches: [],
            },
            {
                filters: ['foo.com##+js(scriptlet)', 'foo.com#@#+js(scriptlet)'],
                hostname: 'foo.com',
                hrefs: [],
                injections: [],
                matches: [],
            },
            // = unhide +js() disable
            {
                filters: [
                    'foo.com##+js(scriptlet1)',
                    'foo.com##+js(scriptlet2)',
                    // 'foo.com#@#+js()',
                ],
                hostname: 'foo.com',
                hrefs: [],
                injections: ['scriptlet1', 'scriptlet2'],
                matches: [],
            },
            {
                filters: [
                    'foo.com##+js(scriptlet1)',
                    'foo.com##+js(scriptlet2)',
                    'foo.com#@#+js()', // specific to hostname
                ],
                hostname: 'foo.com',
                hrefs: [],
                injections: [],
                matches: [],
            },
            {
                filters: [
                    'foo.com##+js(scriptlet1)',
                    'foo.com##+js(scriptlet2)',
                    '#@#+js()', // applies to all hostnames
                ],
                hostname: 'foo.com',
                hrefs: [],
                injections: [],
                matches: [],
            },
            // Generic Hides
            // =============
            // Filters which are not classes, ids or hrefs are matched using the
            // generic index so we expect them to be returned even without providing
            // any DOM information.
            {
                filters: ['##adwords1', '~google.*##adwords2'],
                hostname: 'domain.com',
                injections: [],
                matches: ['adwords1', 'adwords2'],
            },
            // Selectors ids, classes and hrefs are not returned without DOM information.
            {
                filters: [
                    '##.adwords1',
                    '~google.*##.adwords2',
                    '##[href="https://foo"]',
                    '##[href^="https://foo"]',
                    '##[href*="https://foo"]',
                    '##a[href*="https://foo"]',
                ],
                hostname: 'domain.com',
                injections: [],
                matches: [],
            },
            // Return filters with correct DOM info
            // .class
            {
                filters: [
                    '##.adwords1',
                    '~google.*###adwords2',
                    '##[href="https://foo"]',
                    '##[href^="https://foo"]',
                    '##[href*="https://foo"]',
                    '##a[href*="https://foo"]',
                ],
                classes: ['foo', 'bar', 'adwords1'],
                hostname: 'domain.com',
                injections: [],
                matches: ['.adwords1'],
            },
            // #id
            {
                filters: [
                    '##.adwords1',
                    '~google.*###adwords2',
                    '##[href="https://foo"]',
                    '##[href^="https://foo"]',
                    '##[href*="https://foo"]',
                    '##a[href*="https://foo"]',
                ],
                hostname: 'domain.com',
                ids: ['foo', 'bar', 'adwords2'],
                injections: [],
                matches: ['#adwords2'],
            },
            // hrefs
            {
                filters: [
                    '##.adwords1',
                    '~google.*###adwords2',
                    '##[href="https://foo.com"]',
                    '##[href^="https://bar.com"]',
                    '##[href*="https://baz.net"]',
                    '##a[href*="http://foo.com"]',
                ],
                hostname: 'domain.com',
                hrefs: ['https://foo.com', 'https://bar.com'],
                injections: [],
                matches: [
                    '[href="https://foo.com"]',
                    '[href^="https://bar.com"]',
                    'a[href*="http://foo.com"]',
                ],
            },
            // DOM-specific selectors should be subjected to exceptions in hostname and entities
            // = no matching class
            {
                classes: [],
                filters: ['~foo.com##.selector'],
                hostname: 'bar.com',
                injections: [],
                matches: [],
            },
            // = matching class + domain
            {
                classes: ['selector'],
                filters: ['~foo.com##.selector'],
                hostname: 'bar.com',
                injections: [],
                matches: ['.selector'],
            },
            // = domain exception
            {
                classes: ['selector'],
                filters: ['~foo.com##.selector'],
                hostname: 'foo.com',
                injections: [],
                matches: [],
            },
            // = entity exception
            {
                classes: ['selector'],
                filters: ['~foo.*##.selector'],
                hostname: 'foo.com',
                injections: [],
                matches: [],
            },
            {
                classes: ['selector'],
                filters: ['~foo.*##.selector'],
                hostname: 'foo.co.uk',
                injections: [],
                matches: [],
            },
            // ==========
            {
                filters: ['##adwords1', '~google.*##adwords2'],
                hostname: 'google.com',
                injections: [],
                matches: ['adwords1'],
            },
            // Negated entity exceptions do not appear in matches
            {
                filters: ['##adwords1', '~google.com#@#adwords2'],
                hostname: 'google.com',
                injections: [],
                matches: ['adwords1'],
            },
            {
                filters: ['##adwords1', '~google.com#@#adwords2'],
                hostname: 'google.de',
                injections: [],
                matches: ['adwords1'],
            },
            {
                filters: ['##adwords1', '~google.*#@#adwords2'],
                hostname: 'google.com',
                injections: [],
                matches: ['adwords1'],
            },
            // Exception cancels generic rule
            {
                filters: ['##adwords1', 'google.com#@#adwords1'],
                hostname: 'google.com',
                injections: [],
                matches: [],
            },
            // Exception cancels entity rule
            {
                filters: ['google.*##adwords1', 'google.com#@#adwords1'],
                hostname: 'google.com',
                injections: [],
                matches: [],
            },
            // Exception cancels hostname rule
            {
                filters: ['google.com##adwords1', 'google.com#@#adwords1'],
                hostname: 'google.com',
                injections: [],
                matches: [],
            },
            // Entity exception cancels generic rule
            {
                filters: ['##adwords1', 'google.*#@#adwords1'],
                hostname: 'google.com',
                injections: [],
                matches: [],
            },
            // Entity exception cancels entity rule
            {
                filters: ['google.*##adwords1', 'google.*#@#adwords1'],
                hostname: 'google.com',
                injections: [],
                matches: [],
            },
            // Exception does not cancel if selector is different
            {
                filters: ['##adwords1', 'google.de#@#adwords2'],
                hostname: 'google.de',
                injections: [],
                matches: ['adwords1'],
            },
            {
                filters: ['google.de##adwords1', 'google.de#@#adwords2'],
                hostname: 'google.de',
                injections: [],
                matches: ['adwords1'],
            },
            // Exception does not cancel if hostname is different
            {
                filters: ['##adwords1', 'google.com#@#adwords1'],
                hostname: 'google.de',
                injections: [],
                matches: ['adwords1'],
            },
            {
                filters: ['##adwords1', 'accounts.google.com#@#adwords1'],
                hostname: 'google.com',
                injections: [],
                matches: ['adwords1'],
            },
            // Hostname matching hostname vs. domain
            // = domain constraint matches hostname with subdomains
            {
                filters: ['baz.com##selector'],
                hostname: 'foo.bar.baz.com',
                injections: [],
                matches: ['selector'],
            },
            // = entity constraint matches hostname with subdomains
            {
                filters: ['baz.*##selector'],
                hostname: 'foo.bar.baz.com',
                injections: [],
                matches: ['selector'],
            },
            {
                filters: ['baz.*##selector'],
                hostname: 'foo.bar.baz.co.uk',
                injections: [],
                matches: ['selector'],
            },
            // = domain exception matches hostname with subdomain
            {
                filters: ['~baz.de##selector'],
                hostname: 'foo.bar.baz.de',
                injections: [],
                matches: [],
            },
            // = entity exception matches hostname with subdomain
            {
                filters: ['~baz.*##selector'],
                hostname: 'foo.bar.baz.co.uk',
                injections: [],
                matches: [],
            },
            // ===
            {
                filters: ['##ad-stack'],
                hostname: 'speedtest.net',
                injections: [],
                matches: ['ad-stack'],
            },
            {
                filters: ['##AD300Right'],
                hostname: 'example.de',
                injections: [],
                matches: ['AD300Right'],
            },
            {
                filters: [],
                hostname: 'pokerupdate.com',
                injections: [],
                matches: [],
            },
            {
                filters: ['pokerupdate.com##related-room', 'pokerupdate.com##prev-article'],
                hostname: 'pokerupdate.com',
                injections: [],
                matches: ['related-room', 'prev-article'],
            },
            {
                filters: [
                    'google.com,~mail.google.com##.class[style="margin: 0pt;"]1',
                    '~mail.google.com##.class[style="margin: 0pt;"]2',
                    '###tads + div + .c',
                    '##.mw > #rcnt > #center_col > #taw > #tvcap > .c',
                    '##.mw > #rcnt > #center_col > #taw > .c',
                ],
                hostname: 'google.com',
                injections: [],
                matches: [
                    '.class[style="margin: 0pt;"]1',
                    '.class[style="margin: 0pt;"]2',
                    '#tads + div + .c',
                    '.mw > #rcnt > #center_col > #taw > #tvcap > .c',
                    '.mw > #rcnt > #center_col > #taw > .c',
                ],
                classes: ['class', 'mw'],
                ids: ['tads'],
            },
            {
                filters: [
                    'google.com,~mail.google.com##.class[style="margin: 0pt;"]1',
                    '~mail.google.com##.class[style="margin: 0pt;"]2',
                    '###tads + div + .c',
                    '##.mw > #rcnt > #center_col > #taw > #tvcap > .c',
                    '##.mw > #rcnt > #center_col > #taw > .c',
                ],
                hostname: 'google.com',
                injections: [],
                matches: [
                    '.class[style="margin: 0pt;"]1',
                    '#tads + div + .c',
                    '.mw > #rcnt > #center_col > #taw > #tvcap > .c',
                    '.mw > #rcnt > #center_col > #taw > .c',
                ],
                classes: ['mw'],
                ids: ['tads'],
            },
            {
                filters: [
                    'google.com,~mail.google.com##.class[style="margin: 0pt;"]',
                    '###tads + div + .c',
                    '##.mw > #rcnt > #center_col > #taw > #tvcap > .c',
                    '##.mw > #rcnt > #center_col > #taw > .c',
                ],
                hostname: 'google.com',
                injections: [],
                matches: ['.class[style="margin: 0pt;"]', '#tads + div + .c'],
                ids: ['tads'],
            },
            {
                filters: [
                    'google.com,~mail.google.com##.class[style="margin: 0pt;"]',
                    '###tads + div + .c',
                    '##.mw > #rcnt > #center_col > #taw > #tvcap > .c',
                    '##.mw > #rcnt > #center_col > #taw > .c',
                ],
                hostname: 'google.com',
                injections: [],
                matches: ['.class[style="margin: 0pt;"]'],
            },
            {
                filters: [
                    'google.com,~mail.google.com##.class[style="margin: 0pt;"]',
                    '###tads + div + .c',
                    '##.mw > #rcnt > #center_col > #taw > #tvcap > .c',
                    '##.mw > #rcnt > #center_col > #taw > .c',
                ],
                hostname: 'mail.google.com',
                injections: [],
                matches: [
                    '#tads + div + .c',
                    '.mw > #rcnt > #center_col > #taw > #tvcap > .c',
                    '.mw > #rcnt > #center_col > #taw > .c',
                ],
                classes: ['class', 'mw'],
                ids: ['tads'],
            },
            {
                filters: [],
                hostname: 'bitbucket.org',
                injections: [],
                matches: [],
            },
        ].forEach(({ classes, filters, hostname, hrefs, ids, injections, matches, }) => {
            it(JSON.stringify({ filters, hostname, matches, injections }), () => {
                // Initialize engine with all rules from test case
                const engine = createEngine(filters.join('\n'));
                engine.resources.js.set('scriptlet', 'scriptlet');
                engine.resources.js.set('scriptlet1', 'scriptlet1');
                engine.resources.js.set('scriptlet2', 'scriptlet2');
                // #getCosmeticsFilters
                const { styles, scripts } = engine.getCosmeticsFilters({
                    domain: (0, tldts_experimental_1.getDomain)(hostname) || '',
                    hostname,
                    url: `https://${hostname}`,
                    classes,
                    hrefs,
                    ids,
                });
                (0, chai_1.expect)(scripts).to.have.lengthOf(injections.length);
                (0, chai_1.expect)(scripts.sort()).to.eql(injections.sort());
                // Parse stylesheets to get selectors back
                const selectors = [];
                if (styles.length !== 0) {
                    for (const stylesheet of styles.trim().split('\n\n')) {
                        const parts = stylesheet.trim().split(',\n');
                        selectors.push(...parts.slice(0, -1));
                        // Handle last one separately since it has the CSS rule
                        const last = parts[parts.length - 1];
                        selectors.push(last.slice(0, last.lastIndexOf('{')).trim());
                    }
                }
                (0, chai_1.expect)(selectors).to.have.lengthOf(matches.length);
                (0, chai_1.expect)(selectors.sort()).to.eql(matches.sort());
            });
        });
    });
});
describe('diff updates', () => {
    function testUpdates(name, baseFilters) {
        describe(name, () => {
            const base = engine_1.default.parse(baseFilters.join('\n'), {
                debug: false,
                enableCompression: false,
                enableOptimizations: false,
                integrityCheck: false,
                loadCosmeticFilters: false,
                loadGenericCosmeticsFilters: false,
                loadNetworkFilters: true,
            });
            const baseSerialized = base.serialize();
            const getSerialized = () => baseSerialized.slice();
            const getEngine = () => engine_1.default.deserialize(getSerialized());
            it('stays the same with empty update', () => {
                const engine = getEngine();
                const updated = engine.updateFromDiff({});
                (0, chai_1.expect)(updated).to.be.false;
                (0, chai_1.expect)((0, utils_1.typedArrayEqual)(engine.serialize(), getSerialized())).to.be.true;
            });
            it('stays the same with adding removing same filters', () => {
                const filtersAdded = [
                    '||hostname*^bar|$image,domain=foo.com|baz.co.uk',
                    '||hostname*^bar|$image,domain=foo.com|baz.co.uk,generichide',
                    '||hostame*^bar|$image,domain=foo.com|baz.co.uk,badfilter',
                    '||hostame*^bar|$image,domain=foo.com|baz.co.uk',
                    'ads$csp=foo',
                    'tracker$redirect=foo.js',
                    '@@||f*o*o.com^$~media',
                    '/very_important/ads.js$important,script',
                    'foo.com,bar.*##.selector',
                    '#@#.selector',
                    '##+js(inject.js,arg1,arg2)',
                ];
                const filtersRemoved = Array.from(filtersAdded);
                const engine = getEngine();
                // Add filters
                let updated = engine.updateFromDiff({ added: filtersAdded });
                (0, chai_1.expect)(updated).to.be.true;
                (0, chai_1.expect)((0, utils_1.typedArrayEqual)(engine.serialize(), getSerialized())).to.be.false;
                // Remove same filters
                updated = engine.updateFromDiff({ removed: filtersRemoved });
                (0, chai_1.expect)(updated).to.be.true;
                (0, chai_1.expect)((0, utils_1.typedArrayEqual)(engine.serialize(), getSerialized())).to.be.true;
            });
        });
    }
    testUpdates('empty engine', []);
    testUpdates('easylist engine', (0, utils_1.loadEasyListFilters)());
});
//# sourceMappingURL=engine.test.js.map