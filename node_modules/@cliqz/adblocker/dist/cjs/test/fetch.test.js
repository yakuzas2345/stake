"use strict";
/*!
 * Copyright (c) 2017-present Cliqz GmbH. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const chaiAsPromised = require("chai-as-promised");
const chai_1 = require("chai");
require("mocha");
(0, chai_1.use)(chaiAsPromised);
const fetch_1 = require("../src/fetch");
describe('#fetchWithRetry', () => {
    const fakeFetchFactory = (numberOfFailures) => {
        return async (_) => {
            if (numberOfFailures > 0) {
                numberOfFailures -= 1;
                throw new Error(`Failed: ${numberOfFailures + 1}`);
            }
            return {
                arrayBuffer: () => Promise.resolve(new ArrayBuffer(0)),
                json: () => Promise.resolve({}),
                text: () => Promise.resolve(`${numberOfFailures}`),
            };
        };
    };
    it('succeeds on first try', async () => {
        const response = await (0, fetch_1.fetchWithRetry)(fakeFetchFactory(0), 'https://example.com');
        (0, chai_1.expect)(await response.text()).to.equal('0');
    });
    it('succeeds on second try', async () => {
        const response = await (0, fetch_1.fetchWithRetry)(fakeFetchFactory(1), 'https://example.com');
        (0, chai_1.expect)(await response.text()).to.equal('0');
    });
    it('succeeds on third try', async () => {
        const response = await (0, fetch_1.fetchWithRetry)(fakeFetchFactory(2), 'https://example.com');
        (0, chai_1.expect)(await response.text()).to.equal('0');
    });
    it('succeeds on fourth try', async () => {
        const response = await (0, fetch_1.fetchWithRetry)(fakeFetchFactory(3), 'https://example.com');
        (0, chai_1.expect)(await response.text()).to.equal('0');
    });
    it('fails on fifth try', async () => {
        await (0, chai_1.expect)((0, fetch_1.fetchWithRetry)(fakeFetchFactory(4), 'https://example.com')).to.be.rejectedWith(Error, 'Failed: 1');
    });
});
//# sourceMappingURL=fetch.test.js.map