"use strict";
/*!
 * Copyright (c) 2017-present Cliqz GmbH. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("mocha");
const config_1 = require("../src/config");
const data_view_1 = require("../src/data-view");
const optimizer_1 = require("../src/engine/optimizer");
const reverse_index_1 = require("../src/engine/reverse-index");
const cosmetic_1 = require("../src/filters/cosmetic");
const network_1 = require("../src/filters/network");
const lists_1 = require("../src/lists");
const utils_1 = require("../src/utils");
const utils_2 = require("./utils");
describe('ReverseIndex', () => {
    const { cosmeticFilters, networkFilters } = (0, lists_1.parseFilters)(utils_2.allLists, { debug: true });
    [new config_1.default({ enableCompression: true }), new config_1.default({ enableCompression: false })].forEach((config) => {
        describe(`compression = ${config.enableCompression}`, () => {
            describe('#serialize', () => {
                function testSerializeIndexImpl(filters, deserialize, optimize) {
                    const reverseIndex = new reverse_index_1.default({
                        config,
                        deserialize,
                        filters,
                        optimize,
                    });
                    // Serialize index
                    const buffer = data_view_1.StaticDataView.allocate(reverseIndex.getSerializedSize(), config);
                    reverseIndex.serialize(buffer);
                    // Make sure that we predicted serialized size properly
                    (0, chai_1.expect)(buffer.pos).to.equal(buffer.buffer.byteLength);
                    // Deserialize
                    buffer.seekZero();
                    const deserialized = reverse_index_1.default.deserialize(buffer, deserialize, optimize, config);
                    (0, chai_1.expect)(deserialized).to.eql(reverseIndex);
                }
                it('network (optimize = false)', () => {
                    testSerializeIndexImpl(networkFilters, network_1.default.deserialize, optimizer_1.noopOptimizeNetwork);
                });
                it('network (optimize = true)', () => {
                    testSerializeIndexImpl(networkFilters, network_1.default.deserialize, optimizer_1.optimizeNetwork);
                });
                it('cosmetic', () => {
                    testSerializeIndexImpl(cosmeticFilters, cosmetic_1.default.deserialize, optimizer_1.noopOptimizeCosmetic);
                });
            });
            describe('#getFilters', () => {
                it('network (optimize = false)', () => {
                    (0, chai_1.expect)(new reverse_index_1.default({
                        config,
                        deserialize: network_1.default.deserialize,
                        filters: networkFilters,
                        optimize: optimizer_1.noopOptimizeNetwork,
                    }).getFilters()).to.eql(networkFilters);
                });
                it('network (optimize = true)', () => {
                    (0, chai_1.expect)(new reverse_index_1.default({
                        config,
                        deserialize: network_1.default.deserialize,
                        filters: networkFilters,
                        optimize: optimizer_1.optimizeNetwork,
                    }).getFilters()).to.eql(networkFilters);
                });
                it('cosmetic', () => {
                    (0, chai_1.expect)(new reverse_index_1.default({
                        config,
                        deserialize: cosmetic_1.default.deserialize,
                        filters: cosmeticFilters,
                        optimize: optimizer_1.noopOptimizeCosmetic,
                    }).getFilters()).to.eql(cosmeticFilters);
                });
            });
            for (const optimize of [optimizer_1.noopOptimizeNetwork, optimizer_1.optimizeNetwork]) {
                describe(`optimize = ${optimize !== optimizer_1.noopOptimizeNetwork}`, () => {
                    it('#update', () => {
                        const reverseIndex = new reverse_index_1.default({
                            config,
                            deserialize: network_1.default.deserialize,
                            filters: (0, lists_1.parseFilters)('||foo.com', { loadCosmeticFilters: false, debug: true })
                                .networkFilters,
                            optimize,
                        });
                        // Expect our filter to be listed
                        let filters = reverseIndex.getFilters();
                        (0, chai_1.expect)(filters.map((f) => f.rawLine)).to.eql(['||foo.com']);
                        // Add one new filter
                        reverseIndex.update((0, lists_1.parseFilters)('||bar.com', { loadCosmeticFilters: false, debug: true })
                            .networkFilters, undefined);
                        filters = reverseIndex.getFilters();
                        (0, chai_1.expect)(filters.map((f) => f.rawLine)).to.eql(['||foo.com', '||bar.com']);
                        // Add a third filter and remove the two others
                        reverseIndex.update((0, lists_1.parseFilters)('||baz.com', { loadCosmeticFilters: false, debug: true })
                            .networkFilters, new Set(filters.map((f) => f.getId())));
                        filters = reverseIndex.getFilters();
                        (0, chai_1.expect)(filters.map((f) => f.rawLine)).to.eql(['||baz.com']);
                        // Update with no filters
                        reverseIndex.update([], new Set(reverseIndex.getFilters().map((f) => f.getId())));
                        (0, chai_1.expect)(reverseIndex.getFilters()).to.eql([]);
                    });
                    describe('#iterMatchingFilters', () => {
                        const emptyIndex = new reverse_index_1.default({
                            config,
                            deserialize: network_1.default.deserialize,
                            filters: [],
                            optimize,
                        });
                        const filters = `
||foo.com
/ads/tracker.js$image
|woot|$redirect=noop.js
      `;
                        const exampleIndex = new reverse_index_1.default({
                            config,
                            deserialize: network_1.default.deserialize,
                            filters: (0, lists_1.parseFilters)(filters, { loadCosmeticFilters: false, debug: true })
                                .networkFilters,
                            optimize,
                        });
                        it('works on empty index', () => {
                            let matches = 0;
                            const cb = (_) => {
                                matches += 1;
                                return true;
                            };
                            // No tokens
                            emptyIndex.iterMatchingFilters(new Uint32Array(0), cb);
                            (0, chai_1.expect)(matches).to.equal(0);
                            // Some tokens
                            emptyIndex.iterMatchingFilters((0, utils_1.tokenize)('foo bar baz', false, false), cb);
                            (0, chai_1.expect)(matches).to.equal(0);
                        });
                        it('handle no match', () => {
                            for (let i = 0; i < 100; i += 1) {
                                let matches = 0;
                                const cb = (_) => {
                                    matches += 1;
                                    return true;
                                };
                                // No tokens
                                exampleIndex.iterMatchingFilters(new Uint32Array([i]), cb);
                                (0, chai_1.expect)(matches).to.equal(0);
                            }
                        });
                        describe('finds matches', () => {
                            const matches = new Set();
                            let ret = true;
                            const cb = (f) => {
                                matches.add(f.rawLine);
                                return ret;
                            };
                            [
                                ['foo', ['||foo.com']],
                                ['com', []], // filter was indexed using 'foo' and not 'com'
                                ['ads', ['/ads/tracker.js$image']],
                                ['foo.ads', ['||foo.com', '/ads/tracker.js$image']],
                                ['woot', ['|woot|$redirect=noop.js']],
                                ['https://bar.foo.com/ads/tracker.js', ['||foo.com', '/ads/tracker.js$image']],
                            ].forEach(([input, expected]) => {
                                describe(`token=${input}, expected=${JSON.stringify(expected)}`, () => {
                                    it('get all matches', () => {
                                        matches.clear();
                                        ret = true; // iterate on all filters
                                        exampleIndex.iterMatchingFilters((0, utils_1.tokenize)(input, false, false), cb);
                                        (0, chai_1.expect)(matches).to.eql(new Set(expected));
                                    });
                                    it('check early termination', () => {
                                        matches.clear();
                                        ret = false; // early termination on first filter
                                        exampleIndex.iterMatchingFilters((0, utils_1.tokenize)(input, false, false), cb);
                                        (0, chai_1.expect)(matches.size).to.equal(expected.length === 0 ? 0 : 1);
                                    });
                                });
                            });
                        });
                        it('stores filters without tokens in wildcard bucket', () => {
                            const index = new reverse_index_1.default({
                                config,
                                deserialize: network_1.default.deserialize,
                                filters: (0, lists_1.parseFilters)(`
wildcard
||foo.com
      `, { loadCosmeticFilters: false, debug: true }).networkFilters,
                                optimize,
                            });
                            const matches = new Set();
                            const cb = (f) => {
                                matches.add(f.rawLine);
                                return true;
                            };
                            // Wildcard filter is always returned
                            [
                                ['foo', ['||foo.com', 'wildcard']],
                                ['com', ['wildcard']], // filter was indexed using 'foo' and not 'com'
                            ].forEach(([input, expected]) => {
                                // Get all matches
                                matches.clear();
                                index.iterMatchingFilters((0, utils_1.tokenize)(input, false, false), cb);
                                (0, chai_1.expect)(matches).to.eql(new Set(expected));
                            });
                        });
                    });
                    describe('#getTokens', () => {
                        it('no token if empty', () => {
                            (0, chai_1.expect)(new reverse_index_1.default({
                                config,
                                deserialize: network_1.default.deserialize,
                                filters: [],
                                optimize,
                            }).getTokens()).to.eql(new Uint32Array(0));
                        });
                        it('returns all indexing tokens', () => {
                            (0, chai_1.expect)(new reverse_index_1.default({
                                config,
                                deserialize: network_1.default.deserialize,
                                filters: (0, lists_1.parseFilters)(`
/ads^
/foo^
-bar-
          `).networkFilters,
                                optimize,
                            })
                                .getTokens()
                                .sort()).to.eql(new Uint32Array([(0, utils_1.fastHash)('ads'), (0, utils_1.fastHash)('foo'), (0, utils_1.fastHash)('bar')]).sort());
                        });
                    });
                });
            }
        });
    });
});
//# sourceMappingURL=reverse-index.test.js.map