"use strict";
/*!
 * Copyright (c) 2017-present Cliqz GmbH. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const zlib_1 = require("zlib");
const adblocker_1 = require("../adblocker");
const PREFIX = 'https://raw.githubusercontent.com/cliqz-oss/adblocker/master/packages/adblocker/assets';
async function loadFromLocalAssets(lists) {
    return (await Promise.all(lists
        .map((path) => (0, path_1.join)(__dirname, '..', 'assets', path.slice(PREFIX.length)))
        .map((path) => fs_1.promises.readFile(path, 'utf-8')))).join('\n');
}
function loadAdsLists() {
    return loadFromLocalAssets(adblocker_1.adsLists);
}
function loadAdsAndTrackingLists() {
    return loadFromLocalAssets(adblocker_1.adsAndTrackingLists);
}
function loadFullLists() {
    return loadFromLocalAssets(adblocker_1.fullLists);
}
(async () => {
    for (const [name, raw] of [
        ['ads', await loadAdsLists()],
        ['ads + trackers', await loadAdsAndTrackingLists()],
        ['ads + trackers + annoyances', await loadFullLists()],
    ]) {
        for (const config of [
            { loadNetworkFilters: true, loadCosmeticFilters: true },
            { loadNetworkFilters: false, loadCosmeticFilters: true },
            { loadNetworkFilters: true, loadCosmeticFilters: false },
        ]) {
            const engine = adblocker_1.FiltersEngine.parse(raw, Object.assign({ enableCompression: true }, config));
            const { networkFilters, cosmeticFilters } = engine.getFilters();
            console.log(`> ${name} (${networkFilters.length} network + ${cosmeticFilters.length} hide)`);
            for (const [compression, compress] of [
                ['raw', (b) => b],
                ['gzip', zlib_1.gzipSync],
                ['brotli', zlib_1.brotliCompressSync],
            ]) {
                console.log(' +', compression, compress(engine.serialize()).byteLength, 'bytes');
            }
        }
    }
})();
//# sourceMappingURL=engine-size.js.map